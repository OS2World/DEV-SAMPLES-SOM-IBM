/*
 *
 *  25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1996,1996
 *  All Rights Reserved
 *  Licensed Materials - Property of IBM
 *  US Government Users Restricted Rights - Use, duplication or
 *  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 *
 *
 *
 *  DISCLAIMER OF WARRANTIES.
 *  The following [enclosed] code is sample code created by IBM
 *  Corporation. This sample code is not part of any standard or IBM
 *  product and is provided to you solely for the purpose of assisting
 *  you in the development of your applications.  The code is provided
 *  "AS IS". IBM MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT
 *  NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE, REGARDING THE FUNCTION OR PERFORMANCE OF
 *  THIS CODE.  IBM shall not be liable for any damages arising out of
 *  your use of the sample code, even if they have been advised of the
 *  possibility of such damages.
 *
 *  DISTRIBUTION.
 *  This sample code can be freely distributed, copied, altered, and
 *  incorporated into other software, provided that it bears the above
 *  Copyright notice and DISCLAIMER intact.
 *
 */

#ifndef lint
static char *sccsid = "%Z% %I% %W% %G% %U% [%H% %T%]";
#endif

/*
 *  OESOBJ.CPP
 *
 *  DESCRIPTION:
 *
 *  This file is the implementation of classes declared in oesobj.idl.
 *  Code below not generated by the SOM compiler is bracked by comment
 *  lines:
 *
 *  // Implementor supplied code begins -------------------------------
 *  // Implementor supplied code ends ---------------------------------
 *
 */

/*
 *  This file was generated by the SOM Compiler and Emitter Framework.
 *  Generated using template emitter:
 *      SOM Emitter emitxtm: 2.47
 */

#define SOM_Module_samobj_Source

#include "samobj.xih"



SOM_Scope void  SOMLINK OESSample_CompanyCountspopulate(OESSample_CompanyCounts *somSelf,
                                                         Environment *ev)
{
    OESSample_CompanyCountsData *somThis = OESSample_CompanyCountsGetData(somSelf);
    OESSample_CompanyCountsMethodDebug("OESSample_CompanyCounts","OESSample_CompanyCountspopulate");

// Implementor supplied code begins -------------------------------

/*
   This simulation merely assign values to object state.  In a real
application, the values might be fetched from a database.
*/
    long c;

    for(c=0; c < containerSize; ++c)
      somThis->valueContainer[c] = c;

// Implementor supplied code ends ---------------------------------
}

SOM_Scope long  SOMLINK OESSample_CompanyCountsgetCount(OESSample_CompanyCounts *somSelf,
                                                         Environment *ev,
                                                        long deptNum)
{
    OESSample_CompanyCountsData *somThis = OESSample_CompanyCountsGetData(somSelf);
    OESSample_CompanyCountsMethodDebug("OESSample_CompanyCounts","OESSample_CompanyCountsgetCount");

    /* Return statement to be customized: */

// Implementor supplied code begins -------------------------------

/*
   This simulation merely returns the size of the container.  In a real application, the
parameter deptNum would be used to identify a particular count in the count container.
*/


    { long retVal;  return (containerSize); }

// Implementor supplied code ends ---------------------------------
}

SOM_Scope void SOMLINK OESSample_CompanyCountssomDefaultInit(OESSample_CompanyCounts *somSelf,
                                                             som3InitCtrl* ctrl)
{
    OESSample_CompanyCountsData *somThis; /* set in BeginInitializer */
    somInitCtrl globalCtrl;
    somBooleanVector myMask;
    OESSample_CompanyCountsMethodDebug("OESSample_CompanyCounts","somDefaultInit");
    OESSample_CompanyCounts_BeginInitializer_somDefaultInit;

    OESSample_CompanyCounts_Init_somOS_ServiceBasePRef_somDefaultInit(somSelf, ctrl);
    OESSample_CompanyCounts_Init_somStream_Streamable_somDefaultInit(somSelf, ctrl);

    /*
     * local CompanyCounts initialization code added by programmer
     */

// Implementor supplied code begins -------------------------------

/*
   The Externalization service uses managed objects.  Managed objects
   are instances of classes that derive from somOS::ServiceBase.
   ServiceBase instances are initialized using init_for_object_creation();
   therefore, initialization code in defined there.
*/

// Implementor supplied code ends ---------------------------------
}


SOM_Scope void SOMLINK OESSample_CompanyCountssomDestruct(OESSample_CompanyCounts *somSelf,
                                                          octet doFree,
                                                          som3DestructCtrl* ctrl)
{
    OESSample_CompanyCountsData *somThis; /* set in BeginDestructor */
    somDestructCtrl globalCtrl;
    somBooleanVector myMask;
    OESSample_CompanyCountsMethodDebug("OESSample_CompanyCounts","OESSample_CompanyCountssomDestruct");
    OESSample_CompanyCounts_BeginDestructor;

    /*
     * local CompanyCounts deinitialization code added by programmer
     */

// Implementor supplied code ends ---------------------------------

/*
   Managed objects have there own uninitializer which is
uninit_for_object_destruction().  Code to run when objects are
destroyed should be implemented there.
*/

// Implementor supplied code ends ---------------------------------

    OESSample_CompanyCounts_EndDestructor;
}


SOM_Scope void  SOMLINK OESSample_CompanyCountsinternalize_from_stream(OESSample_CompanyCounts *somSelf,
                                                                        Environment *ev,
                                                                       CosStream_StreamIO* stream,
                                                                       CosLifeCycle_FactoryFinder* ff)
{
    OESSample_CompanyCountsData *somThis = OESSample_CompanyCountsGetData(somSelf);
    OESSample_CompanyCountsMethodDebug("OESSample_CompanyCounts","OESSample_CompanyCountsinternalize_from_stream");

    OESSample_CompanyCounts_parent_somStream_Streamable_internalize_from_stream(somSelf,
                                                                                ev,
                                                                                stream,
                                                                                ff);
// Implementor supplied code begins -------------------------------

/*
   Recall that this object is an instance of a class that has a persistent
reference and this object is embedded in another (dept45).  Given that and
the fact that the stream being used in this sample is of type
somStream::OSStream the following code is not executed because a reference
is read from the streamIO buffer by the Externalization Service in stead.
If we had used a stream of somStream::Stream, the following code would be
executed because the externalize method would have written object state
values to the streamIO buffer.
*/
    for(long c=0; c < containerSize; c++)
       somThis->valueContainer[c] = stream->read_float(ev);

// Implementor supplied code ends ---------------------------------
}

SOM_Scope void  SOMLINK OESSample_CompanyCountsexternalize_to_stream(OESSample_CompanyCounts *somSelf,
                                                                      Environment *ev,
                                                                     CosStream_StreamIO* stream)
{
    OESSample_CompanyCountsData *somThis = OESSample_CompanyCountsGetData(somSelf);
    OESSample_CompanyCountsMethodDebug("OESSample_CompanyCounts","OESSample_CompanyCountsexternalize_to_stream");

    OESSample_CompanyCounts_parent_somStream_Streamable_externalize_to_stream(somSelf,
                                                                              ev,
                                                                              stream);
// Implementor supplied code begins -------------------------------

/*
   Recall that this object is an instance of a class that has a persistent
reference and this object is embedded in another (dept45).  This object is
used by dept45 but is owned by another object (an instance ofVeryBigCo).
Given that and the fact that the stream being used in this sample is of type
somStream::OSStream the following code is not executed. The Externalization
Service writes a stringified reference instead of executing the following
code.  If we had used a stream of somStream::Stream the following code would
be executed.  Streams of type somStream::Stream alway externalize object state
values whether of not the object has a persistent reference.
*/

    for(long c=0; c < containerSize; c++)
        stream->write_float(ev,somThis->valueContainer[c]);

// Implementor supplied code ends ---------------------------------
}

SOM_Scope SOMObject*  SOMLINK OESSample_CompanyCountsinit_for_object_creation(OESSample_CompanyCounts *somSelf,
                                                                               Environment *ev)
{
    OESSample_CompanyCountsData *somThis = OESSample_CompanyCountsGetData(somSelf);
    OESSample_CompanyCountsMethodDebug("OESSample_CompanyCounts","OESSample_CompanyCountsinit_for_object_creation");

    OESSample_CompanyCounts_parent_somOS_ServiceBasePRef_init_for_object_creation(somSelf,
                                                                                  ev);
// Implementor supplied code begins -------------------------------

/*
   Method init_for_object_creation is the initializer for managed objects.
Managed objects are instances of classes that derive from somOS::ServiceBase
class.
*/
     somThis->valueContainer = new long[containerSize];  // Allocate the array for the counts.

// Implementor supplied code ends ---------------------------------

    return (OESSample_CompanyCounts_parent_somStream_Streamable_init_for_object_creation(somSelf,
                                                                                         ev));
}

SOM_Scope void  SOMLINK OESSample_CompanyCountsuninit_for_object_destruction(OESSample_CompanyCounts *somSelf,
                                                                              Environment *ev)
{
    OESSample_CompanyCountsData *somThis = OESSample_CompanyCountsGetData(somSelf);
    OESSample_CompanyCountsMethodDebug("OESSample_CompanyCounts","OESSample_CompanyCountsuninit_for_object_destruction");

// Implementor supplied code begins -------------------------------
/*
   Method uninit_for_object_destruction uninitializes managed objects.
Managed objects are instances of classes that derive from somOS::ServiceBase
class.
*/

    delete [] somThis->valueContainer;   // deallocate the array for the counts

// Implementor supplied code ends ---------------------------------

    OESSample_CompanyCounts_parent_somOS_ServiceBasePRef_uninit_for_object_destruction(somSelf,
                                                                                       ev);
    OESSample_CompanyCounts_parent_somStream_Streamable_uninit_for_object_destruction(somSelf,
                                                                                      ev);
}


SOM_Scope float  SOMLINK OESSample_SalesValuesgetSale(OESSample_SalesValues *somSelf,
                                                       Environment *ev)
{
    OESSample_SalesValuesData *somThis = OESSample_SalesValuesGetData(somSelf);
    OESSample_SalesValuesMethodDebug("OESSample_SalesValues","OESSample_SalesValuesgetSale");

    /* Return statement to be customized: */

// Implementor supplied code begins -------------------------------

   float retVal = somThis->valueContainer[somThis->currentValueId];
   somThis->currentValueId += 1;

    {  return (retVal); }
// Implementor supplied code ends ---------------------------------

}

SOM_Scope void  SOMLINK OESSample_SalesValuespopulate(OESSample_SalesValues *somSelf,
                                                       Environment *ev)
{
    OESSample_SalesValuesData *somThis = OESSample_SalesValuesGetData(somSelf);
    OESSample_SalesValuesMethodDebug("OESSample_SalesValues","OESSample_SalesValuespopulate");

// Implementor supplied code begins -------------------------------

/*
   The values are fetched.  This simulation merely assign values.  In a real
application, the values might be fetched from a database.
*/
    long c;

    for(c=0; c < containerSize; c++)
      somThis->valueContainer[c] = c;

// Implementor supplied code ends ---------------------------------
}

SOM_Scope void SOMLINK OESSample_SalesValuessomDefaultInit(OESSample_SalesValues *somSelf,
                                                           som3InitCtrl* ctrl)
{
    OESSample_SalesValuesData *somThis; /* set in BeginInitializer */
    somInitCtrl globalCtrl;
    somBooleanVector myMask;
    OESSample_SalesValuesMethodDebug("OESSample_SalesValues","somDefaultInit");
    OESSample_SalesValues_BeginInitializer_somDefaultInit;

    OESSample_SalesValues_Init_somStream_Streamable_somDefaultInit(somSelf, ctrl);

    /*
     * local SalesValues initialization code added by programmer
     */
// Implementor supplied code begins -------------------------------

/*
   The Externalization service uses managed objects.  Managed objects
   are instances of classes that derive from somOS::ServiceBase.
   ServiceBase instances are initialized using init_for_object_creation();
   therefore, initialization code in defined there.
*/

// Implementor supplied code ends ---------------------------------
}


SOM_Scope void SOMLINK OESSample_SalesValuessomDestruct(OESSample_SalesValues *somSelf,
                                                        octet doFree,
                                                        som3DestructCtrl* ctrl)
{
    OESSample_SalesValuesData *somThis; /* set in BeginDestructor */
    somDestructCtrl globalCtrl;
    somBooleanVector myMask;
    OESSample_SalesValuesMethodDebug("OESSample_SalesValues","OESSample_SalesValuessomDestruct");
    OESSample_SalesValues_BeginDestructor;

    /*
     * local SalesValues deinitialization code added by programmer
     */

// Implementor supplied code begins -------------------------------

/*
   Managed objects have there own uninitializer which is
uninit_for_object_destruction().  Code to run when objects are
destroyed should be implemented there.
*/

// Implementor supplied code ends ---------------------------------

    OESSample_SalesValues_EndDestructor;
}


SOM_Scope void  SOMLINK OESSample_SalesValuesinternalize_from_stream(OESSample_SalesValues *somSelf,
                                                                      Environment *ev,
                                                                     CosStream_StreamIO* stream,
                                                                     CosLifeCycle_FactoryFinder* ff)
{
    OESSample_SalesValuesData *somThis = OESSample_SalesValuesGetData(somSelf);
    OESSample_SalesValuesMethodDebug("OESSample_SalesValues","OESSample_SalesValuesinternalize_from_stream");

    OESSample_SalesValues_parent_somStream_Streamable_internalize_from_stream(somSelf,
                                                                              ev,
                                                                              stream,
                                                                              ff);
// Implementor supplied code begins -------------------------------

/*
   Recall that this object when streamed  wrote object state values to
the streamIO buffer (deep copy).  The internalize method is aware of this by
information contained in the header tag of the streamIO buffer.  This method
returns those values which were written.  It is the responsibility of the
implementor of this method to insure that the reads are done in the same
sequential order as the writes of the externalize_to_stream method.

Please note that since the attribute currentValueId was NOT written to the
buffer it is NOT read from the buffer.

If the value had been streamed the following code would be used to return the
written value:
    somThis->currentValueId = stream->read_long(ev);
*/
    for(long c=0; c < containerSize; c++)
       somThis->valueContainer[c] = stream->read_float(ev);

// Implementor supplied code ends ---------------------------------
}

SOM_Scope void  SOMLINK OESSample_SalesValuesexternalize_to_stream(OESSample_SalesValues *somSelf,
                                                                    Environment *ev,
                                                                   CosStream_StreamIO* stream)
{
    OESSample_SalesValuesData *somThis = OESSample_SalesValuesGetData(somSelf);
    OESSample_SalesValuesMethodDebug("OESSample_SalesValues","OESSample_SalesValuesexternalize_to_stream");

    OESSample_SalesValues_parent_somStream_Streamable_externalize_to_stream(somSelf,
                                                                            ev,
                                                                            stream);
// Implementor supplied code begins -------------------------------

/*
   Recall that this object when streamed writes object state values to
the streamIO buffer.  This occurs because this instance (isA SalesValues)
does not have a persistent reference -- ie SalesValues does not inherit from
somOS::ServiceBasePRef.

Please note it is not required to externalize all state values of an object.
Recall this object has an attribute currentValueId  which we choose not to externalize.

If we wanted the value streamed the following code would be used;
    stream->write_long(ev, somThis->currentValueId);
*/
    for(long c=0; c < containerSize; c++)
       stream->write_float(ev, somThis->valueContainer[c]);

// Implementor supplied code ends ---------------------------------
}

SOM_Scope SOMObject*  SOMLINK OESSample_SalesValuesinit_for_object_creation(OESSample_SalesValues *somSelf,
                                                                             Environment *ev)
{
    OESSample_SalesValuesData *somThis = OESSample_SalesValuesGetData(somSelf);
    OESSample_SalesValuesMethodDebug("OESSample_SalesValues","OESSample_SalesValuesinit_for_object_creation");

// Implementor supplied code begins -------------------------------

    somThis->valueContainer = new float[containerSize]; // Allocate the array for the sales.

// Implementor supplied code ends ---------------------------------

    return (OESSample_SalesValues_parent_somStream_Streamable_init_for_object_creation(somSelf,
                                                                                       ev));
}

SOM_Scope void  SOMLINK OESSample_SalesValuesuninit_for_object_destruction(OESSample_SalesValues *somSelf,
                                                                            Environment *ev)
{
    OESSample_SalesValuesData *somThis = OESSample_SalesValuesGetData(somSelf);
    OESSample_SalesValuesMethodDebug("OESSample_SalesValues","OESSample_SalesValuesuninit_for_object_destruction");

    OESSample_SalesValues_parent_somStream_Streamable_uninit_for_object_destruction(somSelf,
                                                                                    ev);
// Implementor supplied code begins -------------------------------

    delete [] somThis->valueContainer;   // deallocate the array for the sales

// Implementor supplied code ends ---------------------------------
}


SOM_Scope void  SOMLINK OESSample_Departmentpopulate(OESSample_Department *somSelf,
                                                      Environment *ev)
{
    OESSample_DepartmentData *somThis = OESSample_DepartmentGetData(somSelf);
    OESSample_DepartmentMethodDebug("OESSample_Department","OESSample_Departmentpopulate");

// Implementor supplied code begins -------------------------------

    somThis->sales->populate(ev);
/*
   Note:  The counts attribute of this department is owned by VeryBigCo; therefore,
the counts object is populated via a call to VeryBigCopopulate().
*/

// Implementor supplied code ends ---------------------------------
}

SOM_Scope void SOMLINK OESSample_DepartmentsomDefaultInit(OESSample_Department *somSelf,
                                                          som3InitCtrl* ctrl)
{
    OESSample_DepartmentData *somThis; /* set in BeginInitializer */
    somInitCtrl globalCtrl;
    somBooleanVector myMask;
    OESSample_DepartmentMethodDebug("OESSample_Department","somDefaultInit");
    OESSample_Department_BeginInitializer_somDefaultInit;

    OESSample_Department_Init_somStream_Streamable_somDefaultInit(somSelf, ctrl);

    /*
     * local Department initialization code added by programmer
     */

// Implementor supplied code begins -------------------------------

/*
   The Externalization service uses managed objects.  Managed objects
   are instances of classes that derive from somOS::ServiceBase.
   ServiceBase instances are initialized using init_for_object_creation();
   therefore, initialization code in defined there.
*/

// Implementor supplied code ends ---------------------------------
}


SOM_Scope void SOMLINK OESSample_DepartmentsomDestruct(OESSample_Department *somSelf,
                                                       octet doFree,
                                                       som3DestructCtrl* ctrl)
{
    OESSample_DepartmentData *somThis; /* set in BeginDestructor */
    somDestructCtrl globalCtrl;
    somBooleanVector myMask;
    OESSample_DepartmentMethodDebug("OESSample_Department","OESSample_DepartmentsomDestruct");
    OESSample_Department_BeginDestructor;

    /*
     * local Department deinitialization code added by programmer
     */

// Implementor supplied code begins -------------------------------

/*
   Managed objects have there own uninitializer which is
uninit_for_object_destruction().  Code to run when objects are
destroyed should be implemented there.
*/

// Implementor supplied code ends ---------------------------------

    OESSample_Department_EndDestructor;
}


SOM_Scope void  SOMLINK OESSample_Departmentinternalize_from_stream(OESSample_Department *somSelf,
                                                                     Environment *ev,
                                                                    CosStream_StreamIO* stream,
                                                                    CosLifeCycle_FactoryFinder* ff)
{
    OESSample_DepartmentData *somThis = OESSample_DepartmentGetData(somSelf);
    OESSample_DepartmentMethodDebug("OESSample_Department","OESSample_Departmentinternalize_from_stream");

    OESSample_Department_parent_somStream_Streamable_internalize_from_stream(somSelf,
                                                                             ev,
                                                                             stream,
                                                                             ff);
// Implementor supplied code begins -------------------------------

   if(somIsObj(somThis->counts) ) { // Insure the object does not exist before read_object()
                                    // if the object being read has a persistent reference
      delete somThis->counts;
      somThis->counts = NULL;
   }
   somThis->counts =
      (OESSample_CompanyCounts *) ((void *)  stream->read_object(ev, ff, somThis->counts) );

   somThis->sales =
      (OESSample_SalesValues *) ((void *) stream->read_object(ev, ff, somThis->sales) );

// Implementor supplied code ends ---------------------------------
}

SOM_Scope void  SOMLINK OESSample_Departmentexternalize_to_stream(OESSample_Department *somSelf,
                                                                   Environment *ev,
                                                                  CosStream_StreamIO* stream)
{
    OESSample_DepartmentData *somThis = OESSample_DepartmentGetData(somSelf);
    OESSample_DepartmentMethodDebug("OESSample_Department","OESSample_Departmentexternalize_to_stream");

    OESSample_Department_parent_somStream_Streamable_externalize_to_stream(somSelf,
                                                                           ev,
                                                                           stream);
// Implementor supplied code begins -------------------------------

/*
   Instances of this class contain two embedded objects: counts and sales.  Recall
that counts has a persistent reference so a stringified reference is written to
the streamIO buffer (shallow copy). Sales does not have a persistent reference
therefore state values are written to the streamIO buffer (deep copy(.  Method
write_object() provides this behavior.
*/
    stream->write_object(ev,somThis->counts );
    stream->write_object(ev,somThis->sales );

// Implementor supplied code ends ---------------------------------
}

SOM_Scope SOMObject*  SOMLINK OESSample_Departmentinit_for_object_creation(OESSample_Department *somSelf,
                                                                            Environment *ev)
{
    OESSample_DepartmentData *somThis = OESSample_DepartmentGetData(somSelf);
    OESSample_DepartmentMethodDebug("OESSample_Department","OESSample_Departmentinit_for_object_creation");

// Implementor supplied code begins -------------------------------

/*
   The sequence defined below is required for managed objects (refer to the SOMOS::Server Users
   Guide for more details.
   1. Create using somNewNoInit()
   2. Initialize by invoking init_for_object_creation on the object returned
      by somNewNoInit (somDefaultInit is not called)
   3. release the memory from the pointer returned by somNewNoInit().
*/

 // new() creates the class object if necessary, and then uses somNewNoInit
 // to instanciate the instance.

    OESSample_SalesValues   *tmpSales  = new OESSample_SalesValues;    // somNewNoInit

    somThis->sales  = (OESSample_SalesValues *) ((void *)
       tmpSales->init_for_object_creation(ev) );
/*
   Note the release operator below causes the temporary pointer to be dis-associated
from the allocated memory.
*/
    ((SOMDObject *)tmpSales)->release(ev);

// Implementor supplied code ends ---------------------------------

    return (OESSample_Department_parent_somStream_Streamable_init_for_object_creation(somSelf,
                                                                                      ev));
}

SOM_Scope void  SOMLINK OESSample_Departmentuninit_for_object_destruction(OESSample_Department *somSelf,
                                                                           Environment *ev)
{
    OESSample_DepartmentData *somThis = OESSample_DepartmentGetData(somSelf);
    OESSample_DepartmentMethodDebug("OESSample_Department","OESSample_Departmentuninit_for_object_destruction");

// Implementor supplied code begins -------------------------------

/*
   Method uninit_for_object_destruction uninitializes managed objects.
Managed objects are instances of classes that derive from somOS::ServiceBase
class.

   The delete operator below causes the somDestruct of the object to be called but before
doing so note that the managed object is uninitialized.
*/
   somThis->sales->uninit_for_object_destruction(ev);
   delete somThis->sales;

/*
   Note: The counts attribute of this department is owned by VeryBigCo; therefore,
the storage for the counts is destroyed by VeryBigCounitit_for_object_destruction();
*/

// Implementor supplied code ends ---------------------------------

    OESSample_Department_parent_somStream_Streamable_uninit_for_object_destruction(somSelf,
                                                                                   ev);
}


SOM_Scope void  SOMLINK OESSample_VeryBigCopopulate(OESSample_VeryBigCo *somSelf,
                                                     Environment *ev)
{
    OESSample_VeryBigCoData *somThis = OESSample_VeryBigCoGetData(somSelf);
    OESSample_VeryBigCoMethodDebug("OESSample_VeryBigCo","OESSample_VeryBigCopopulate");

// Implementor supplied code begins -------------------------------

    somThis->dept45->populate(ev);
    somThis->counts->populate(ev);

// Implementor supplied code ends ---------------------------------
}

SOM_Scope void SOMLINK OESSample_VeryBigCosomDefaultInit(OESSample_VeryBigCo *somSelf,
                                                         som3InitCtrl* ctrl)
{
    OESSample_VeryBigCoData *somThis; /* set in BeginInitializer */
    somInitCtrl globalCtrl;
    somBooleanVector myMask;
    OESSample_VeryBigCoMethodDebug("OESSample_VeryBigCo","somDefaultInit");
    OESSample_VeryBigCo_BeginInitializer_somDefaultInit;

    OESSample_VeryBigCo_Init_somStream_Streamable_somDefaultInit(somSelf, ctrl);

    /*
     * local VeryBigCo initialization code added by programmer
     */
// Implementor supplied code begins -------------------------------

/*
   The Externalization service uses managed objects.  Managed objects
   are instances of classes that derive from somOS::ServiceBase.
   ServiceBase instances are initialized using init_for_object_creation();
   therefore, initialization code is defined there.
*/

// Implementor supplied code ends ---------------------------------
}


SOM_Scope void SOMLINK OESSample_VeryBigCosomDestruct(OESSample_VeryBigCo *somSelf,
                                                      octet doFree,
                                                      som3DestructCtrl* ctrl)
{
    OESSample_VeryBigCoData *somThis; /* set in BeginDestructor */
    somDestructCtrl globalCtrl;
    somBooleanVector myMask;
    OESSample_VeryBigCoMethodDebug("OESSample_VeryBigCo","OESSample_VeryBigCosomDestruct");
    OESSample_VeryBigCo_BeginDestructor;

    /*
     * local VeryBigCo deinitialization code added by programmer
     */

// Implementor supplied code begins -------------------------------

/*
   The Externalization service uses managed objects.  Managed objects
   are instances of classes that derive from somOS::ServiceBase.
   ServiceBase instances are uninitialized using uninit_for_object_destruction();
   therefore, destruct code in defined there.
*/

// Implementor supplied code ends ---------------------------------

    OESSample_VeryBigCo_EndDestructor;
}


SOM_Scope SOMObject*  SOMLINK OESSample_VeryBigCoinit_for_object_creation(OESSample_VeryBigCo *somSelf,
                                                                           Environment *ev)
{
    OESSample_VeryBigCoData *somThis = OESSample_VeryBigCoGetData(somSelf);
    OESSample_VeryBigCoMethodDebug("OESSample_VeryBigCo","OESSample_VeryBigCoinit_for_object_creation");

// Implementor supplied code begins -------------------------------
/*
   Note the release operators below causes the temporary pointers to be dis-associated
with the allocated memory.
*/

    OESSample_CompanyCounts *tmpCounts = new OESSample_CompanyCounts;  // somNewNoInit

    somThis->counts = (OESSample_CompanyCounts *) ((void *)   // Create the counts container to be
       tmpCounts->init_for_object_creation(ev) );             // shared by all departments.
    ((SOMDObject *)tmpCounts)->release(ev);

    OESSample_Department    *tmpdept    = new OESSample_Department;   // Create the object for
    somThis->dept45 = (OESSample_Department *) ((void *)              // Department 45
       tmpdept->init_for_object_creation(ev) );
    ((SOMDObject *)tmpdept)->release(ev);
    somThis->dept45->_set_counts(ev, somThis->counts);                // See it is shared

// Implementor supplied code ends ---------------------------------

    return (OESSample_VeryBigCo_parent_somStream_Streamable_init_for_object_creation(somSelf,
                                                                                     ev));
}

SOM_Scope void  SOMLINK OESSample_VeryBigCouninit_for_object_destruction(OESSample_VeryBigCo *somSelf,
                                                                          Environment *ev)
{
    OESSample_VeryBigCoData *somThis = OESSample_VeryBigCoGetData(somSelf);
    OESSample_VeryBigCoMethodDebug("OESSample_VeryBigCo","OESSample_VeryBigCouninit_for_object_destruction");

// Implementor supplied code begins -------------------------------

/*
   Method uninit_for_object_destructions the uninitializer for managed objects.
Managed objects are instances of classes that derive from somOS::ServiceBase
class.
*/

   somThis->dept45->uninit_for_object_destruction(ev);
   delete somThis->dept45;

   somThis->counts->uninit_for_object_destruction(ev);
   delete somThis->counts;

// Implementor supplied code ends ---------------------------------

    OESSample_VeryBigCo_parent_somStream_Streamable_uninit_for_object_destruction(somSelf,
                                                                                  ev);
}

