/*
 *
 *   25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1996,1996
 *  All Rights Reserved
 *  Licensed Materials - Property of IBM
 *  US Government Users Restricted Rights - Use, duplication or
 *  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 */

/*
 *
 * DISCLAIMER OF WARRANTIES.
 * The following [enclosed] code is sample code created by IBM
 * Corporation. This sample code is not part of any standard or IBM
 * product and is provided to you solely for the purpose of assisting
 * you in the development of your applications.  The code is provided
 * "AS IS". IBM MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE, REGARDING THE FUNCTION OR PERFORMANCE OF
 * THIS CODE.  IBM shall not be liable for any damages arising out of
 * your use of the sample code, even if they have been advised of the
 * possibility of such damages.
 *
 * DISTRIBUTION.
 * This sample code can be freely distributed, copied, altered, and
 * incorporated into other software, provided that it bears the above
 * Copyright notice and DISCLAIMER intact.
 */

Readme for SOMObjects 3.0 LifeCycle Service sample.

LifeCycle Service:

Sample summary:
---------------

The LifeCycle Service enables clients to create and remove local or
distributed objects without having to be aware of the location of the objects.
An administrative mechanism is also provided to allow the user to customize
the runtime environment to specify where objects are created (on what server...)

The focus of this sample is on the following interfaces:

somLifeCycle:GenericFactory
somLifeCycle:FactoryFinder
somLifeCycle:LifeCycleObject


This sample shows basic usage of the LifeCycle Object Service. The main focus
is on using Generic Factories to create objects.

The sample is written in the context of a Rental Agency. There are 2 types of
rentals: movies and games. Both of these inherit from a Rental base class which
gives it several attribute and methods. Movies and games are purchased by the
Rental Agency and can then be checked in and out by customers. There are 3 Logs
which manager the objects in the samples:

RentalItemLog: contains references to all Movie and Game objects
RentalLog: contains references to all Rental Objects (tracks rental check in/out)
CustomerLog: contains referecnes to all Customers.


Making the sample
-----------------
BEFORE making the sample, the DSOM daemon "somdd" must be running (either
in the background or in a separate OS/2 command window) and the Name Service
must have been configured using som_cfg, as described in the README file in
%SOMBASE%\samples\somd.  This is because the makefile for the sample
registers the servers and classes in the Name Service.

The makefiles in this directory will build a client executable, and
a dynamically loadable library.  They are:

 - client.exe (client executable)

 - rental.dll (the library for the classes registered in the RentalServer)

Use the following command to compile the sample using the VisualAge C++ compiler:

  nmake -f makefile.age all /e


Running the sample:
-------------------
Before running the sample, remember to start the DSOM daemon "somdd" in this
directory. If the daemon is currently running you must first kill it and
restart it in this directory.  This is because the daemon "somdd" will
start the sample server "RentalServer" which will attempt to load the rental dll.
The rental dll needs to reside in the LIBPATH of the sample server.

To start the daemon, enter:

   start /c /f somdd

Once the daemon is started, the somossvr must be started
which will load the rental dll. Start the somossvr by entering:

   start somossvr -a RentalServer -i

Run the sample by calling "client"

Cleaning up the sample:
-----------------------
BEFORE cleaning up the sample, the DSOM daemon "somdd" must be running (either
in the background or in a separate OS/2 command window).  This is because the
makefile for the sample deregisters the servers and classes in the Name Service.

Terminate all the instances of somossvr(RentalServer) and Namingserver.
This is because the servers will have the som.ir and dlls locked so they can't
be erased.  To clean up the sample, enter you make command with the clean option.
This will delete all non-source files and deregister itself from the Name Service
and Implementation Repository.

The daemon "somdd" will restart the naming server to deregister the sample class.


Files:
------
  rental.idl:
  rentalf.idl:
  rentalg.idl:

  rental.cpp
  rentalf.cpp
  renatlg.cpp

  client.cpp

  readme.lif:
  buildsmp.cmd

  makefile.age: makefile for IBM Visual Age C++ compiler.

