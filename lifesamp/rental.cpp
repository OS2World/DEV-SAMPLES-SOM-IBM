
/*
 *  This file was generated by the SOM Compiler.
 *  Generated using:
 *     SOM incremental update: 2.20
 */

/*
 *  25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1996,1996
 *  All Rights Reserved
 *  Licensed Materials - Property of IBM
 *  US Government Users Restricted Rights - Use, duplication or
 *  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 *
 *
 *
 *
 * DISCLAIMER OF WARRANTIES.
 * The following [enclosed] code is sample code created by IBM
 * Corporation. This sample code is not part of any standard or IBM
 * product and is provided to you solely for the purpose of assisting
 * you in the development of your applications.  The code is provided
 * "AS IS". IBM MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE, REGARDING THE FUNCTION OR PERFORMANCE OF
 * THIS CODE.  IBM shall not be liable for any damages arising out of
 * your use of the sample code, even if they have been advised of the
 * possibility of such damages.
 *
 * DISTRIBUTION.
 * This sample code can be freely distributed, copied, altered, and
 * incorporated into other software, provided that it bears the above
 * Copyright notice and DISCLAIMER intact.
 */

/********************************************************************************
 *
 * This file contains the implementations methods which are broken down into
 * those that are of most interest based on their usage/relation with the
 * LifeCycle Service and those that simply support the 'application/business'
 * logic such as printing.  Other methods such as string attribute overrides,
 * somDefaultInit, somDestruct, etc have not been documented since they are
 * rather straight forward.
 *
 * Most focus should be on the methods that focus on LifeCycle and/or the main
 * business logic and therefore these methods have been documented in detail vs.
 * the other methods. The following list contains the methods of most interest:
 *
 * RentalMgr_check_out
 * RentalMgr_check_in
 * RentalMgr_purchase
 * RentalMgr_admin
 * RentalMgr_add_customer
 * RentalMgr_remove_customer
 *
 ********************************************************************************/


#ifndef SOM_Module_rental_Source
#define SOM_Module_rental_Source
#endif
#define RentalItem_Class_Source

#include <stdio.h>        // stardard input,output header
#include <iostream.h>     // additional input,output for streaming
#include <somlcdef.h>     // LifeCycle Service specific
#include <somlc.xh>       // LifeCycle Service specific
#include <somd.xh>        // DSOM
#include <somnm.xh>       // Naming Service Specific

#include "rental.xih"
#include "rentalf.xh"
#include "rentalg.xh"


/*
 *Method from the IDL attribute statement:
 *"attribute string title"
 */

SOM_Scope string  SOMLINK RentalItems__get_title(RentalItem *somSelf,
                                                  Environment *ev)
{
    string title;

    RentalItemData *somThis = RentalItemGetData(somSelf);
    RentalItemMethodDebug("RentalItem","RentalItems__get_title");

    if (somThis->title) {
        title = (string) SOMMalloc(strlen(somThis->title) + 1);
        strcpy(title, somThis->title);
    } else
        title = (string) NULL;
    return title;
}


/*
 *Method from the IDL attribute statement:
 *"attribute string title"
 */

SOM_Scope void  SOMLINK RentalItems__set_title(RentalItem *somSelf,
                                                Environment *ev,
                                               string title)
{
    RentalItemData *somThis = RentalItemGetData(somSelf);
    RentalItemMethodDebug("RentalItem","RentalItems__set_title");

    if (somThis->title)
        SOMFree(somThis->title);
    if (title) {
        somThis->title = (string) SOMMalloc(strlen(title) + 1);
        strcpy(somThis->title, title);
    } else
        somThis->title = (string) NULL;
}


/*
 *Method from the IDL attribute statement:
 *"attribute string buyer"
 */

SOM_Scope string  SOMLINK RentalItems__get_buyer(RentalItem *somSelf,
                                                  Environment *ev)
{
    string buyer;

    RentalItemData *somThis = RentalItemGetData(somSelf);
    RentalItemMethodDebug("RentalItem","RentalItems__get_buyer");

    if (somThis->buyer) {
        buyer = (string) SOMMalloc(strlen(somThis->buyer) + 1);
        strcpy(buyer, somThis->buyer);
    } else
        buyer = (string) NULL;
    return buyer;

}


/*
 *Method from the IDL attribute statement:
 *"attribute string buyer"
 */

SOM_Scope void  SOMLINK RentalItems__set_buyer(RentalItem *somSelf,
                                                Environment *ev,
                                               string buyer)
{
    RentalItemData *somThis = RentalItemGetData(somSelf);
    RentalItemMethodDebug("RentalItem","RentalItems__set_buyer");

    if (somThis->buyer)
        SOMFree(somThis->buyer);
    if (buyer) {
        somThis->buyer = (string) SOMMalloc(strlen(buyer) + 1);
        strcpy(somThis->buyer, buyer);
    } else
        somThis->buyer = (string) NULL;
}

/*************************************************************************
 *
 * The RentalItems_display method builds a string which contains
 * information about one RentalItem object. The string is returned
 * to client who can handle the UI in any desired fashion.
 *
 *************************************************************************/

SOM_Scope string  SOMLINK RentalItems_display(RentalItem *somSelf,
                                               Environment *ev)
{
    string display, bp;

    const int  RentalItem_In = 0;
    const int  RentalItem_Out = 1;

    RentalItemData *somThis = RentalItemGetData(somSelf);
    RentalItemMethodDebug("RentalItem","RentalItems_display");

    display = bp = (string)SOMMalloc(strlen(somThis->title) + 1 +
                 strlen(somThis->buyer) + 80);
    sprintf(bp, "\nTitle: %s ", somThis->title);
    bp += strlen(bp);
    sprintf(bp, "\nBuyer: %s ", somThis->buyer);
    bp += strlen(bp);
    sprintf(bp, "\nId:    %6d ", somThis->id);
    bp += strlen(bp);

    sprintf(bp,"\nStatus: ");
    bp += strlen(bp);

    switch(somThis->status)
    {
       case RentalItem_In:
            sprintf(bp,"In");
            break;
       case RentalItem_Out:
            sprintf(bp,"Out");
            break;
       default:
            sprintf(bp, "Unknown");
            break;
    }
    return display;
}


SOM_Scope void SOMLINK RentalItems_somDefaultInit(RentalItem *somSelf,
                                                  som3InitCtrl* ctrl)
{
    RentalItemData *somThis; /* set in BeginInitializer */
    somInitCtrl globalCtrl;
    somBooleanVector myMask;
    RentalItemMethodDebug("RentalItem","somDefaultInit");
    RentalItem_BeginInitializer_somDefaultInit;

    RentalItem_Init_somLifeCycle_LifeCycleObject_somDefaultInit(somSelf, ctrl);

    somThis->title = "";
    somThis->id = 0;
    somThis->status = 0;
    somThis->buyer = "";
    somThis->num_times_rented = 0;
}


SOM_Scope void SOMLINK RentalItems_somDestruct(RentalItem *somSelf,
                                               octet doFree,
                                               som3DestructCtrl* ctrl)
{
    RentalItemData *somThis; /* set in BeginDestructor */
    somDestructCtrl globalCtrl;
    somBooleanVector myMask;
    RentalItemMethodDebug("RentalItem","RentalItems_somDestruct");
    RentalItem_BeginDestructor;

    /* No code is needed: method overriden for performance. */

    RentalItem_EndDestructor;
}

/*************************************************************************
 *
 * The Movies_display method builds a string which contains
 * information about a Movie object. The string is returned
 * to client who can handle the UI in any desired fashion. The method
 * first invokes the parent display method (placing the return value
 * in the buffer) and then proceeds to generate the Movie specific
 * information for the category and rating.
 *
 *************************************************************************/

SOM_Scope string  SOMLINK Movies_display(Movie *somSelf,  Environment *ev)
{
    string display, bp, rentalitem;

    const long Movie_Drama = 1;
    const long Movie_Action = 2;
    const long Movie_Romance = 3;
    const long Movie_Comedy = 4;

    const long Movie_G = 1;
    const long Movie_PG = 2;
    const long Movie_PG13 = 3;
    const long Movie_R = 4;


    MovieData *somThis = MovieGetData(somSelf);
    MovieMethodDebug("Movie","Movies_display");

    rentalitem = Movie_parent_RentalItem_display(somSelf, ev);
    display = bp = (string)SOMMalloc(strlen(rentalitem) + 100);
    strcpy(bp, rentalitem);
    bp += strlen(bp);
    SOMFree(rentalitem);

    /* might have to move each attribute (above) in separtely.   */

    sprintf(bp,"\nCategory: ");
    bp += strlen(bp);
    switch(somThis->category)
    {
       case Movie_Drama:
            sprintf(bp,"Drama ");
            break;
       case Movie_Action:
            sprintf(bp, "Action ");
            break;
       case Movie_Romance:
            sprintf(bp, "Romance ");
            break;
       case Movie_Comedy:
            sprintf(bp, "Comedy ");
            break;
       default:
            sprintf(bp, "Unknown ");
            break;
    }

    bp += strlen(bp);
    sprintf(bp,"\nRating: ");
    bp += strlen(bp);
    switch(somThis->rating)
    {
       case Movie_G:
            sprintf(bp, "G \n");
            break;
       case Movie_PG:
            sprintf(bp, "PG \n");
            break;
       case Movie_PG13:
            sprintf(bp, "PG13 \n");
            break;
       case Movie_R:
            sprintf(bp, "R \n");
            break;
       default:
            sprintf(bp, "Unknown \n");
            break;
    }
    return display;
}


SOM_Scope void SOMLINK Movies_somDefaultInit(Movie *somSelf,
                                             som3InitCtrl* ctrl)
{
    MovieData *somThis; /* set in BeginInitializer */
    somInitCtrl globalCtrl;
    somBooleanVector myMask;
    MovieMethodDebug("Movie","somDefaultInit");
    Movie_BeginInitializer_somDefaultInit;

    Movie_Init_RentalItem_somDefaultInit(somSelf, ctrl);

    somThis->category = 0;
    somThis->rating = 0;
}


SOM_Scope void SOMLINK Movies_somDestruct(Movie *somSelf, octet doFree,
                                          som3DestructCtrl* ctrl)
{
    MovieData *somThis; /* set in BeginDestructor */
    somDestructCtrl globalCtrl;
    somBooleanVector myMask;
    MovieMethodDebug("Movie","Movies_somDestruct");
    Movie_BeginDestructor;

    /* No code needed, overriden for performance.   */

    Movie_EndDestructor;
}

/*************************************************************************
 *
 * The Games_display method builds a string which contains
 * information about a Game object. The string is returned
 * to client who can handle the UI in any desired fashion. The method
 * first invokes the parent display method (placing the return value
 * in the buffer) and then proceeds to generate the Game specific
 * information for the category and rating.
 *
 *************************************************************************/

SOM_Scope string  SOMLINK Games_display(Game *somSelf,  Environment *ev)
{
    string display, bp, rentalitem;

    const long Game_Battle = 1;
    const long Game_Quest = 2;
    const long Game_Education = 3;

    const long Game_Child = 1;
    const long Game_Adult = 2;

    GameData *somThis = GameGetData(somSelf);
    GameMethodDebug("Game","Games_display");

    rentalitem = Game_parent_RentalItem_display(somSelf, ev);
    display = bp = (string)SOMMalloc(strlen(rentalitem) + 100);
    strcpy(bp, rentalitem);
    bp += strlen(bp);
    SOMFree(rentalitem);

    sprintf(bp,"\nCategory: ");
    bp += strlen(bp);

    switch(somThis->category)
    {
       case Game_Battle:
            sprintf(bp, "Battle");
            break;
       case Game_Quest:
            sprintf(bp, "Quest");
            break;
       case Game_Education:
            sprintf(bp, "Education");
            break;
       default:
            sprintf(bp, "Unknown");
            break;
    }

    bp += strlen(bp);
    sprintf(bp,"\nRating: ");
    bp += strlen(bp);

    switch(somThis->rating)
    {
       case Game_Child:
            sprintf(bp, "Child \n");
            break;
       case Game_Adult:
            sprintf(bp, "Adult \n");
            break;
       default:
            sprintf(bp, "Unknown \n");
            break;
    }
    return display;
}


SOM_Scope void SOMLINK Games_somDefaultInit(Game *somSelf, som3InitCtrl* ctrl)
{
    GameData *somThis; /* set in BeginInitializer */
    somInitCtrl globalCtrl;
    somBooleanVector myMask;
    GameMethodDebug("Game","somDefaultInit");
    Game_BeginInitializer_somDefaultInit;

    Game_Init_RentalItem_somDefaultInit(somSelf, ctrl);

    somThis->category = 0;
    somThis->rating = 0;
}


SOM_Scope void SOMLINK Games_somDestruct(Game *somSelf, octet doFree,
                                         som3DestructCtrl* ctrl)
{
    GameData *somThis; /* set in BeginDestructor */
    somDestructCtrl globalCtrl;
    somBooleanVector myMask;
    GameMethodDebug("Game","Games_somDestruct");
    Game_BeginDestructor;

    /* No Code needed, overriden for performance only  */

    Game_EndDestructor;
}


/*
 *Method from the IDL attribute statement:
 *"attribute string dueDate"
 */

SOM_Scope string  SOMLINK Rental__get_dueDate(RentObject *somSelf,
                                               Environment *ev)
{
    string dueDate;

    RentObjectData *somThis = RentObjectGetData(somSelf);
    RentObjectMethodDebug("RentObject","Rental__get_dueDate");

    if (somThis->dueDate) {
        dueDate = (string) SOMMalloc(strlen(somThis->dueDate) + 1);
        strcpy(dueDate, somThis->dueDate);
    } else
        dueDate = (string) NULL;
    return dueDate;
}


/*
 *Method from the IDL attribute statement:
 *"attribute string dueDate"
 */

SOM_Scope void  SOMLINK Rental__set_dueDate(RentObject *somSelf,
                                             Environment *ev,
                                            string dueDate)
{
    RentObjectData *somThis = RentObjectGetData(somSelf);
    RentObjectMethodDebug("RentObject","Rental__set_dueDate");

    if (somThis->dueDate)
        SOMFree(somThis->dueDate);
    if (dueDate) {
        somThis->dueDate = (string) SOMMalloc(strlen(dueDate) + 1);
        strcpy(somThis->dueDate, dueDate);
    } else
        somThis->dueDate = (string) NULL;
}

/*************************************************************************
 *
 * The Rental_display method builds a string which contains
 * information about a Rental object. The string is returned
 * to client who can handle the UI in any desired fashion.
 *
 *************************************************************************/

SOM_Scope string  SOMLINK Rental_display(RentObject *somSelf,
                                          Environment *ev)
{
    string display, bp;

    RentObjectData *somThis = RentObjectGetData(somSelf);
    RentObjectMethodDebug("RentObject","Rental_display");

    display = bp = (string)SOMMalloc(strlen(somThis->dueDate) + 1
                  + 100);

    sprintf(bp, "\nRental ID: %6d", somThis->rentalID);
    bp += strlen(bp);
    sprintf(bp, "\nDue Date: %s ", somThis->dueDate);
    bp += strlen(bp);
    sprintf(bp, "\nCustomer ID: %6d\n", somThis->CustomerID);

    return display;
}


SOM_Scope void SOMLINK Rental_somDefaultInit(RentObject *somSelf,
                                             som3InitCtrl* ctrl)
{
    RentObjectData *somThis; /* set in BeginInitializer */
    somInitCtrl globalCtrl;
    somBooleanVector myMask;
    RentObjectMethodDebug("RentObject","somDefaultInit");
    RentObject_BeginInitializer_somDefaultInit;

    RentObject_Init_somLifeCycle_LifeCycleObject_somDefaultInit(somSelf, ctrl);

    somThis->rentalID=0;
    somThis->CustomerID=0;
}


SOM_Scope void SOMLINK Rental_somDestruct(RentObject *somSelf,
                                          octet doFree, som3DestructCtrl* ctrl)
{
    RentObjectData *somThis; /* set in BeginDestructor */
    somDestructCtrl globalCtrl;
    somBooleanVector myMask;
    RentObjectMethodDebug("RentObject","Rental_somDestruct");
    RentObject_BeginDestructor;

    /* No code is needed: method overriden for performance. */

    RentObject_EndDestructor;
}


/*
 *Method from the IDL attribute statement:
 *"attribute string firstName"
 */

SOM_Scope string  SOMLINK CustomerAccounts__get_firstName(CustomerAccount *somSelf,
                                                           Environment *ev)
{
    string firstName;

    CustomerAccountData *somThis = CustomerAccountGetData(somSelf);
    CustomerAccountMethodDebug("CustomerAccount","CustomerAccounts__get_firstName");

    if (somThis->firstName) {
        firstName = (string) SOMMalloc(strlen(somThis->firstName) + 1);
        strcpy(firstName, somThis->firstName);
    } else
        firstName = (string) NULL;

    return firstName;
}


/*
 *Method from the IDL attribute statement:
 *"attribute string firstName"
 */

SOM_Scope void  SOMLINK CustomerAccounts__set_firstName(CustomerAccount *somSelf,
                                                         Environment *ev,
                                                        string firstName)
{
    CustomerAccountData *somThis = CustomerAccountGetData(somSelf);
    CustomerAccountMethodDebug("CustomerAccount","CustomerAccounts__set_firstName");

    if (somThis->firstName)
        SOMFree(somThis->firstName);
    if (firstName) {
        somThis->firstName = (string) SOMMalloc(strlen(firstName) + 1);
        strcpy(somThis->firstName, firstName);
    } else
        somThis->firstName = (string) NULL;
}


/*
 *Method from the IDL attribute statement:
 *"attribute string lastName"
 */

SOM_Scope string  SOMLINK CustomerAccounts__get_lastName(CustomerAccount *somSelf,
                                                          Environment *ev)
{
    string lastName;

    CustomerAccountData *somThis = CustomerAccountGetData(somSelf);
    CustomerAccountMethodDebug("CustomerAccount","CustomerAccounts__get_lastName");

    if (somThis->lastName) {
        lastName = (string) SOMMalloc(strlen(somThis->lastName) + 1);
        strcpy(lastName, somThis->lastName);
    } else
        lastName = (string) NULL;

    return lastName;
}


/*
 *Method from the IDL attribute statement:
 *"attribute string lastName"
 */

SOM_Scope void  SOMLINK CustomerAccounts__set_lastName(CustomerAccount *somSelf,
                                                        Environment *ev,
                                                       string lastName)
{
    CustomerAccountData *somThis = CustomerAccountGetData(somSelf);
    CustomerAccountMethodDebug("CustomerAccount","CustomerAccounts__set_lastName");

    if (somThis->lastName)
        SOMFree(somThis->lastName);
    if (lastName) {
        somThis->lastName = (string) SOMMalloc(strlen(lastName) + 1);
        strcpy(somThis->lastName, lastName);
    } else
        somThis->lastName = (string) NULL;
}

/*************************************************************************
 *
 * The CustomerAccounts_display method builds a string which contains
 * information about a CustomerAccount object. The string is returned
 * to client who can handle the UI in any desired fashion.
 *
 *************************************************************************/

SOM_Scope string  SOMLINK CustomerAccounts_rentalHistory(CustomerAccount *somSelf,
                                                          Environment *ev)
{
    string display, bp;
    CustomerAccountData *somThis = CustomerAccountGetData(somSelf);
    CustomerAccountMethodDebug("CustomerAccount","CustomerAccounts_rentalHistory");

    display = bp = (string)SOMMalloc(strlen(somThis->firstName) + 1 +
                 strlen(somThis->lastName) + 100);
    sprintf(bp, "\n%s ", somThis->firstName);
    bp += strlen(bp);
    sprintf(bp, "%s", somThis->lastName);
    bp += strlen(bp);
    sprintf(bp, " has rented %2d movies, ", somThis->Num_of_movies_rented);
    bp += strlen(bp);
    sprintf(bp, "%2d games and has had ", somThis->Num_of_games_rented);
    bp += strlen(bp);
    sprintf(bp, "%2d delinquents", somThis->Num_of_delinquent_returns);

    return display;

}


SOM_Scope void SOMLINK CustomerAccounts_somDefaultInit(CustomerAccount *somSelf,
                                                       som3InitCtrl* ctrl)
{
    CustomerAccountData *somThis; /* set in BeginInitializer */
    somInitCtrl globalCtrl;
    somBooleanVector myMask;
    CustomerAccountMethodDebug("CustomerAccount","somDefaultInit");
    CustomerAccount_BeginInitializer_somDefaultInit;

    CustomerAccount_Init_somLifeCycle_LifeCycleObject_somDefaultInit(somSelf, ctrl);

    somThis->Num_of_movies_rented=0;
    somThis->Num_of_games_rented=0;
    somThis->Num_of_delinquent_returns=0;
    somThis->CustomerID = 0;
}


SOM_Scope void SOMLINK CustomerAccounts_somDestruct(CustomerAccount *somSelf,
                                                    octet doFree,
                                                    som3DestructCtrl* ctrl)
{
    CustomerAccountData *somThis; /* set in BeginDestructor */
    somDestructCtrl globalCtrl;
    somBooleanVector myMask;
    CustomerAccountMethodDebug("CustomerAccount","CustomerAccounts_somDestruct");
    CustomerAccount_BeginDestructor;

    /* No code is needed: method overriden for performance. */

    CustomerAccount_EndDestructor;
}


SOM_Scope void SOMLINK GenericCntr_somDefaultInit(GenericCounter *somSelf,
                                                  som3InitCtrl* ctrl)
{
    GenericCounterData *somThis; /* set in BeginInitializer */
    somInitCtrl globalCtrl;
    somBooleanVector myMask;
    GenericCounterMethodDebug("GenericCounter","somDefaultInit");
    GenericCounter_BeginInitializer_somDefaultInit;

    GenericCounter_Init_somLifeCycle_LifeCycleObject_somDefaultInit(somSelf, ctrl);

    somThis->counter=0;

}


SOM_Scope void SOMLINK GenericCntr_somDestruct(GenericCounter *somSelf,
                                               octet doFree,
                                               som3DestructCtrl* ctrl)
{
    GenericCounterData *somThis; /* set in BeginDestructor */
    somDestructCtrl globalCtrl;
    somBooleanVector myMask;
    GenericCounterMethodDebug("GenericCounter","GenericCntr_somDestruct");
    GenericCounter_BeginDestructor;

    /*
     * local GenericCounter deinitialization code added by programmer
     */

    GenericCounter_EndDestructor;
}

/*
 *Method from the IDL attribute statement:
 *"attribute RentalLog* Rental_Log"
 */

SOM_Scope RentalLog*  SOMLINK RentalMgr__get_Rental_Log(RentalManager *somSelf,
                                                         Environment *ev)
{
    RentalManagerData *somThis = RentalManagerGetData(somSelf);
    RentalManagerMethodDebug("RentalManager","RentalMgr__get_Rental_Log");

    RentalLog*  RntlLog;
    RntlLog = (RentalLog*)(void*)((SOMDObject*)somThis->Rental_Log)->duplicate(ev);
    return (RntlLog);
}

/*
 *Method from the IDL attribute statement:
 *"attribute RentalItemLog* RentalItem_Log"
 */

SOM_Scope RentalItemLog*  SOMLINK RentalMgr__get_RentalItem_Log(RentalManager *somSelf,
                                                                 Environment *ev)
{
    RentalManagerData *somThis = RentalManagerGetData(somSelf);
    RentalManagerMethodDebug("RentalManager","RentalMgr__get_RentalItem_Log");

    RentalItemLog*  RntlItemLog;
    RntlItemLog = (RentalItemLog*)(void*)((SOMDObject*)somThis->RentalItem_Log)->duplicate(ev);
    return (RntlItemLog);
}

/*
 *Method from the IDL attribute statement:
 *"attribute CustomerLog* Customer_Log"
 */

SOM_Scope CustomerLog*  SOMLINK RentalMgr__get_Customer_Log(RentalManager *somSelf,
                                                             Environment *ev)
{
    RentalManagerData *somThis = RentalManagerGetData(somSelf);
    RentalManagerMethodDebug("RentalManager","RentalMgr__get_Customer_Log");

    CustomerLog*  CustLog;
    CustLog = (CustomerLog*)(void*)((SOMDObject*)somThis->Customer_Log)->duplicate(ev);
    return (CustLog);
}

/*************************************************************************
 *
 * The RentalMgr_check_out method contains the following main functions:
 *
 * 1. Create a criteria that hold info used duing object initialization
 * 2. Create a key which is used to determine the object to create
 * 3. Create the RentObject using the create_object method of the
 *    GenericRentalFactory.
 * 4. Add the RentObject to the RentalLog
 * 5. Searches the RentalItemLog and CustomerLog for the pertinant objects
 *    and updates them appropriately.
 *
 *************************************************************************/

SOM_Scope boolean  SOMLINK RentalMgr_check_out(RentalManager *somSelf,
                                                Environment *ev,
                                               long cust_id,
                                               long rental_id)
{
    RentalManagerData *somThis = RentalManagerGetData(somSelf);
    RentalManagerMethodDebug("RentalManager","RentalMgr_check_out");

    RentObject *myRO;

   /**********************************************************************
    *
    * Define a Key and Criteria to be used on the create_object method.
    * The Key is a sequence of structures that each contain 2 strings:
    * the 'kind' and 'Id'. These structures are used to identify the
    * properties used when searching for a factory to create the actual
    * object.
    *
    **********************************************************************/

    CosNaming_NameComponent    elements[2];
    CosLifeCycle_Key           myKey = {2,0,elements};

    CosLifeCycle_NameValuePair  nvPair[2];
    CosLifeCycle_Criteria       myCriteria = {2,0,nvPair};
    boolean                     InitVal = TRUE;


   /**********************************************************************
    * Create a simple criteria to do ititialization on the object. There
    * is only one name/value pair in this case, and it specifies that
    * SOM Initiatization should occur (based on the InitVal = TRUE). The
    * object will be created somNew rather than somNewNoinit.
    **********************************************************************/

    myCriteria._buffer[0].name = SOM_INIT;
    myCriteria._buffer[0].value._type = TypeCodeNew(tk_boolean);
    myCriteria._buffer[0].value._value = &InitVal;
    myCriteria._length = myCriteria._length + 1;


   /***********************************************************************
    *
    * Create the key to be used on the create_object for a RentObject object.
    * A CosLifeCycle_Key is a sequence of structures that each contain two
    * strings. A 'kind' string that identifies if an object interface, factory
    * interface, constraint, ConstraintBuilder, or FactoryFilter is being
    * defined. A 'Id' string which give the details for the associated 'kind'.
    * In this case, the key contains only 1 kind/id pair which specifies that
    * a factory should be used that supports the creation of objects that
    * has a 'RentObject' as its principal interface. The interface (Id) itself
    * needs to be defined in standard CORBA IDL.
    *
    ***********************************************************************/

    myKey._buffer[0].kind = KIND_OBJ_INF;
    myKey._buffer[0].id = "RentObject";
    myKey._length = 1;

   /*************************************************************************
    *
    * Create RentObject using create_object off the GenericRentalFactory. The
    * key and criteria are passed in and used in both the real_object_creation
    * and initialize_object methods (both of which have been overridden on
    * the GenericRentalFactory and the implementation customized to  create
    * objects of multiple interfaces.
    *
    * The GenericRentalFactory being used was created in the RentalManager
    * admin method and the reference to the object set as an attribute
    * of the RentalManager so it can be accessed in multiple methods of
    * the manager object.
    *
    *************************************************************************/

    myRO = (RentObject*)((void*)somThis->GenericRental_Factory->create_object(ev, &myKey, &myCriteria));

   /*************************************************************************
    *
    * Set several attributes, one of which is the due date. The due date could
    * have been calculated but is hardcoded here for simplicity.
    *
    * The attributes could have been passed into the create_object and code
    * added to the initialize_object method on the GenericRentalFactory
    * to handle this initialization 'automatically', but it is done manually
    * here to compare the alternatives that the user has for initializing
    * objects.
    *
    *************************************************************************/
    myRO->_set_rentalID(ev, rental_id);
    myRO->_set_dueDate(ev, "04/26/96");
    myRO->_set_CustomerID(ev, cust_id);

   /**********************************************************************
    *
    *  RentObject needs to be added to the RentalLog. Since we have a
    *  reference to the RentalLog as an attribute of the RentalManager,
    *  we simply run the 'add entry' method against the Log, passing in
    *  RentObject object.
    *
    **********************************************************************/

    somThis->Rental_Log->add_rental(ev, myRO);

   /**********************************************************************
    *
    *  Using the unique rental_id of the RentalItem, we search thru the
    *  RentalItemLog and find the matching object and update several attributes.
    *
    **********************************************************************/

    RentalItem  *Rental;
    Rental =  somThis->RentalItem_Log->find_RentalItem(ev, rental_id);

    long times_rented;

    times_rented = Rental->_get_num_times_rented(ev) + 1;
    Rental->_set_num_times_rented(ev,times_rented);

    Rental->_set_status(ev, 1);


   /**********************************************************************
    * The following code searches the customer log for the specific customer
    * (based on the cust id passed in) and updates the CustomerAccount
    * attribute as appropriate.
    **********************************************************************/

    CustomerAccount    *Customer;
    Customer = somThis->Customer_Log->find_customer(ev, cust_id);

    if (Rental->somIsA(_Movie))
       {
       times_rented = Customer->_get_Num_of_movies_rented(ev) + 1;
       Customer->_set_Num_of_movies_rented(ev, times_rented);
       }
    else
       {
       times_rented = Customer->_get_Num_of_games_rented(ev) + 1;
       Customer->_set_Num_of_games_rented(ev, times_rented);
       }

   /**********************************************************************
    * the return value is not meaningful in this scenario, but could be
    * customized to provide additional functionality to the sample.
    **********************************************************************/
    boolean was_rental_item_checked_out;
    was_rental_item_checked_out = 1;
    return was_rental_item_checked_out;
}


SOM_Scope boolean  SOMLINK RentalMgr_check_in(RentalManager *somSelf,
                                               Environment *ev,
                                              long rental_id)
{
    RentalManagerData *somThis = RentalManagerGetData(somSelf);
    RentalManagerMethodDebug("RentalManager","RentalMgr_check_in");

    RentalItem  *Rental;

   /**********************************************************************
    * The following code searches the RentalItemLog for the specific item
    * (based on the rental_id passed in) and updates the RentalItem objects
    * attribute as appropriate.
    **********************************************************************/

    Rental =  somThis->RentalItem_Log->find_RentalItem(ev, rental_id);
    Rental->_set_status(ev, 0);

   /**********************************************************************
    * The remove_rental method searches the RentalLog for the specific rental
    * (based on the rental_id passed in) and removes the entry from the
    * Log.
    **********************************************************************/

    somThis->Rental_Log->remove_rental(ev, rental_id);

    boolean was_rental_item_checked_in;
    was_rental_item_checked_in = 1;
    return was_rental_item_checked_in;
 }

/*************************************************************************
 *
 * The RentalMgr_purchase method contains the following main functions:
 *
 * 1. Create a key which is used to find a factory to create the
 *    RentalItem object.
 * 2. Create a criteria that holds info used during object initialization
 * 3. Create the RentalItem object using the create_object method of the
 *    GenericRentalFactory.
 * 4. Uses the GenericCounter object to get a unique rental id.
 *
 *************************************************************************/

SOM_Scope void  SOMLINK RentalMgr_purchase(RentalManager *somSelf,
                                            Environment *ev,
                                           string title, long category,
                                           long rating, string buyer,
                                           char movie_or_game)
{
    RentalManagerData *somThis = RentalManagerGetData(somSelf);
    RentalManagerMethodDebug("RentalManager","RentalMgr_purchase");

/*************************************************************************
 *
 * Creates a key that hold 2 kind/id pairs used by create_object. The first
 * pair defines the object interface (either Movie or Game) and the second
 * pair defines the factory interface that should be used to create the
 * objects.
 *
 *************************************************************************/
    string RentalItemType;
    RentalItemType = "RentalItemLog";

    CosNaming_NameComponent    elements[2];
    CosLifeCycle_Key           myKey = {2,0,elements};
    switch(movie_or_game)
    {
       case 'M':
            myKey._buffer[0].kind = KIND_OBJ_INF;
            myKey._buffer[0].id = "Movie";
            myKey._buffer[1].kind = KIND_FAC_INF;
            myKey._buffer[1].id = "MovieFactory";
            break;
       case 'G':
            myKey._buffer[0].kind = KIND_OBJ_INF;
            myKey._buffer[0].id = "Game";
            myKey._buffer[1].kind = KIND_FAC_INF;
            myKey._buffer[1].id = "GameFactory";
            break;
       default:
            myKey._buffer[0].kind = KIND_OBJ_INF;
            myKey._buffer[0].id = "Movie";
            myKey._buffer[1].kind = KIND_FAC_INF;
            myKey._buffer[1].id = "MovieFactory";
            break;
    }

    myKey._length = 2;

/*************************************************************************
 *
 * Create a 'complex' criteria that holds six name/value pairs to be used
 * in real_object_creation and initialize object. The 'name' of each
 * name/value pair indicates what the associated type/value field actually
 * is. For example, the real_object_creation and initialize_object methods
 * will check the name (such as "crit_title") and know that they are
 * working with title 'portion' for the criteria. The value._type specifies
 * the type of the field (string, long, object reference, etc),  and
 * the value._value specifies the actual value of that field.  The SOM_INIT
 * and "crit_title" parts of the criteria will be used during in object
 * creation and the rest are used during object initialization. (see
 * rentalg.cpp for the real_object_creation and initialize_object methods.
 *
 *************************************************************************/

    CosLifeCycle_NameValuePair  nvPair[6];
    CosLifeCycle_Criteria       myCriteria = {7,0,nvPair};
    boolean                     InitVal = FALSE;

    myCriteria._buffer[0].name = SOM_INIT;
    myCriteria._buffer[0].value._type = TypeCodeNew(tk_boolean);
    myCriteria._buffer[0].value._value = &InitVal;
    myCriteria._length = myCriteria._length + 1;

    myCriteria._buffer[1].name = "crit_title";
    myCriteria._buffer[1].value._type = TypeCodeNew(tk_string);
    myCriteria._buffer[1].value._value = title;
    myCriteria._length = myCriteria._length + 1;

    myCriteria._buffer[2].name = "crit_buyer";
    myCriteria._buffer[2].value._type = TypeCodeNew(tk_string);
    myCriteria._buffer[2].value._value = buyer;
    myCriteria._length = myCriteria._length + 1;

    myCriteria._buffer[3].name = "crit_category";
    myCriteria._buffer[3].value._type = TypeCodeNew(tk_long);
    myCriteria._buffer[3].value._value = &category;
    myCriteria._length = myCriteria._length + 1;

    myCriteria._buffer[4].name = "crit_rating";
    myCriteria._buffer[4].value._type = TypeCodeNew(tk_long);
    myCriteria._buffer[4].value._value = &rating;
    myCriteria._length = myCriteria._length + 1;

    myCriteria._buffer[5].name = "crit_log_ref";
    myCriteria._buffer[5].value._type = TypeCodeNew(tk_objref, RentalItemType);
    myCriteria._buffer[5].value._value = somSelf->_get_RentalItem_Log(ev);
    myCriteria._length = myCriteria._length + 1;


/*************************************************************************
 * Use create_object on the GenericRentalFactory to create the object. You
 * should follow the entire code path for this create_object to get a good
 * understanding of a 'complex' object creation and initialization. The
 * general flow goes as follows:
 *
 * 1. The factory finder registered with the GenericRentalFactory is used
 *    to find a list of factories that can create the RentalItem object
 *    (the Key is used to determine this).
 *
 * 2. While an object has not been created, loop thru the factories using
 *    the following priorities.
 *
 *    a. local SOMClass Object (local to the factory finder)
 *    b. remote SOMClass Object (remote to the factory finder)
 *    c. an object that doesn't support the GenericRentalFactory (local)
 *    d. an object that doesn't support the GenericRentalFactory (remote)
 *    e. an object that supports the GenericRentalFactory (local)
 *    f. an object that supports the GenericRentalFactory (remote)
 *
 * 3. If the selected factory supports the GenericRentalFactory (which this
 *    one WILL NOT), then do the following:
 *
 *        -> invoke the create_object on the factory itself (passing in the
 *           same key and criteria.
 *
 *    Else
 *        -> call real_object_creation which basically finds the determine
 *           what kind of object is being created (movie or game) and invokes
 *           the associated 'make' request on the Movie or Game Factory.
 *
 * 4. If the objec was successfully created, then invoke the initialize_object
 *    on the GenericRentalFactory which will interogate the criteria and
 *    initialize some of the object attributes as well as update the
 *    RentalItemLog witht the RentalItem just created.
 *
 *
 *************************************************************************/

    RentalItem *myRentalItem;
    myRentalItem = (RentalItem*)somThis->GenericRental_Factory->create_object(ev, &myKey, &myCriteria);

   // (RentalItemLog*)myCriteria._buffer[5].value._value->release(ev);

/*************************************************************************
 * Get the counter value from the GenericCounter object and use it as
 * the RentalItem id. Also bump the counter for next access.
 *************************************************************************/

    long mycounter;
    mycounter = (somThis->Generic_Counter->_get_counter(ev)) + 1;

    myRentalItem->_set_id(ev, mycounter);

    somThis->Generic_Counter->_set_counter(ev, mycounter);
 }

/*************************************************************************
 * display_cust_info takes in a customer id and searches the CustomerLog
 * to find a match. Using the CustomerAccount object returned from the
 * search, the rentalHistory method is invoked to build a print string that
 * contains the actual customer information.
 *************************************************************************/

SOM_Scope string  SOMLINK RentalMgr_display_cust_info(RentalManager *somSelf,
                                                     Environment *ev,
                                                    long cust_id)
{
    string Print_Buffer;

    RentalManagerData *somThis = RentalManagerGetData(somSelf);
    RentalManagerMethodDebug("RentalManager","RentalMgr_display_cust_info");

    CustomerAccount    *Customer;
    Customer = somThis->Customer_Log->find_customer(ev, cust_id);

    Print_Buffer = Customer->rentalHistory(ev);

    return Print_Buffer;

}

/*************************************************************************
 * display_rental_info takes in a rental id and searches the RentalLog
 * to find a match. Using the RentObject object returned from the
 * search, the display method is invoked to build a print string that
 * contains the actual RentObject information.
 *************************************************************************/

SOM_Scope string  SOMLINK RentalMgr_display_rental_info(RentalManager *somSelf,
                                                         Environment *ev,
                                                        long rental_id)
{
    string Print_Buffer;

    RentalManagerData *somThis = RentalManagerGetData(somSelf);
    RentalManagerMethodDebug("RentalManager","RentalMgr_display_rental_info");

    RentObject   *Rental;
    Rental = somThis->Rental_Log->find_rental(ev, rental_id);

    Print_Buffer = Rental->display(ev);

    return Print_Buffer;
}

/*************************************************************************
 *
 * The RentalMgr_admin method contains the following main functions which
 * can be viewed as 'administrative' or setup code:
 *
 * 1. Resolve to the local root naming context, then the global root
 *    naming context.
 * 2. Resolve to the default GenericFactory and default FactoryFinder
 *    that were bound to the global root at som_cfg time. These objects
 *    are created and intended to be used when there is no additional
 *    tailoring needed to be done by the user.
 * 3. Create a key which is used to find a factory to create the
 *    RentalItem object.
 * 4. Create a criteria that holds info used during object initialization
 *
 *
 *************************************************************************/
SOM_Scope void  SOMLINK RentalMgr_admin(RentalManager *somSelf,
                                         Environment *ev)
{
  RentalManagerData *somThis = RentalManagerGetData(somSelf);
  RentalManagerMethodDebug("RentalManager","RentalMgr_admin");

  RentalItemLog                   *myRIL;
  CustomerLog                     *myCL;
  RentalLog                       *myRL;

  GenericRentalFactory            *myGRF;
  RentalManager                   *myRM;
  GenericCounter                  *myGC;

 /*******************************************************************************
  * resolve to the local root naming context.
  *******************************************************************************/

  ExtendedNaming_ExtendedNamingContext* rootNC;

  rootNC = (ExtendedNaming_ExtendedNamingContext *)
        SOMD_ORBObject->resolve_initial_references (ev, "NameService");

 /*******************************************************************************
  * The following block of code is used to resolve to the global root
  * Naming context.
  *******************************************************************************/

  CosNaming_Name* GenericName;
  GenericName = new CosNaming_Name;
  GenericName->_buffer = (CosNaming_NameComponent*)SOMMalloc(sizeof(CosNaming_NameComponent));
  GenericName->_buffer[0].id = ".:";
  GenericName->_buffer[0].kind = "";
  GenericName->_length = GenericName->_maximum = 1;

  ExtendedNaming_ExtendedNamingContext* GrootNC;
  GrootNC = (ExtendedNaming_ExtendedNamingContext*)rootNC->resolve(ev, GenericName);


  if (ev->_major != NO_EXCEPTION)
  {
     somPrintf("\n GetRoot:EXCEPTION CAUGHT IN SETUP=> ");
     somPrintf(" << %s >> !!\n", somExceptionId(ev));
  }

  if (((SOMDObject*)rootNC)->is_nil(((SOMDObject*)rootNC), ev))
  {
     somPrintf("GetRoot:Failed to get root Naming Context");
  }


 /*****************************************************************************
  * Resolve to the default GenericFactory and
  * default FactoryFinder objects that are bound into the Global root  context.
  * These to objects were bound at som_cfg time and the user can resolve to
  * these objects and use them as appropriate.
  *****************************************************************************/

  GenericName->_buffer[0].id = "LifeCycleGenericFactory";
  GenericName->_buffer[0].kind = "";

  somLifeCycle_GenericFactory* defaultGenericFactory;
  defaultGenericFactory = (somLifeCycle_GenericFactory*)(void*)GrootNC->resolve(ev, GenericName);

  GenericName->_buffer[0].id = "LifeCycleFactoryFinder";
  GenericName->_buffer[0].kind = "";

  somLifeCycle_FactoryFinder * defaultFactoryFinder;
  defaultFactoryFinder = (somLifeCycle_FactoryFinder*)(void*)GrootNC->resolve(ev, GenericName);


  /****************************************************************************
   * Create a simple criteria to do ititialization on the object
   ****************************************************************************/

  CosLifeCycle_NameValuePair  nvPair[2];
  CosLifeCycle_Criteria       myCriteria = {2,0,nvPair};
  boolean                     InitVal = TRUE;

  myCriteria._buffer[0].name = SOM_INIT;
  myCriteria._buffer[0].value._type = TypeCodeNew(tk_boolean);
  myCriteria._buffer[0].value._value = &InitVal;
  myCriteria._length = myCriteria._length + 1;

  /****************************************************************************
   * Create a simple key to define the object interface.
   ****************************************************************************/

  CosNaming_NameComponent    elements[2];
  CosLifeCycle_Key           myKey = {2,0,elements};

  myKey._buffer[0].kind = KIND_OBJ_INF;
  myKey._buffer[0].id = "GenericRentalFactory";
  myKey._length = 1;

 /****************************************************************************
  * Create the GenericRentalFactory object and set the reference in the
  * Rental Mananger.
  ****************************************************************************/

  myGRF = (GenericRentalFactory*)((void*)defaultGenericFactory->create_object(ev, &myKey, &myCriteria));

  myGRF->set_factory_finder(ev, defaultFactoryFinder);

  somThis->GenericRental_Factory = myGRF;

 /****************************************************************************
  * Create the GenericCounter object and set the reference in the
  * Rental Mananger.
  ****************************************************************************/

  myKey._buffer[0].kind = KIND_OBJ_INF;
  myKey._buffer[0].id = "GenericCounter";

  myGC = (GenericCounter*)((void*)defaultGenericFactory->create_object(ev, &myKey, &myCriteria));
  somThis->Generic_Counter = myGC;

 /****************************************************************************
  * Create the RentalItemLog object and set the reference in the
  * Rental Mananger.  Use the criteria defined above.
  ****************************************************************************/

  myKey._buffer[0].kind = KIND_OBJ_INF;
  myKey._buffer[0].id = "RentalItemLog";

  myRIL = (RentalItemLog*)((void*)defaultGenericFactory->create_object(ev, &myKey, &myCriteria));
  somThis->RentalItem_Log = myRIL;

 /****************************************************************************
  * Create the RentalLog object and set the reference in the
  * Rental Mananger.  Use the criteria defined above.
  ****************************************************************************/

  myKey._buffer[0].kind = KIND_OBJ_INF;
  myKey._buffer[0].id = "RentalLog";

  myRL = (RentalLog*)((void*)defaultGenericFactory->create_object(ev, &myKey, &myCriteria));
  somThis->Rental_Log = myRL;

 /****************************************************************************
  * Create the CustomerLog object and set the reference in the
  * Rental Mananger.  Use the criteria defined above.
  ****************************************************************************/
  myKey._buffer[0].kind = KIND_OBJ_INF;
  myKey._buffer[0].id = "CustomerLog";

  myCL = (CustomerLog*)((void*)defaultGenericFactory->create_object(ev, &myKey, &myCriteria));
  somThis->Customer_Log = myCL;

 /****************************************************************************
  * Create the RentalManager object and bind it into the root name context.
  * The client (admin) will resolve and use it. Use the criteria defined above.
  ****************************************************************************/
 // myKey._buffer[0].kind = KIND_OBJ_INF;
 // myKey._buffer[0].id = "RentalManager";
 //
 // myRM = (RentalManager*)((void*)defaultGenericFactory->create_object(ev, &myKey, &myCriteria));
 //
 // GenericName->_buffer[0].id = "RentalManagerNm";
 // GrootNC->bind(ev, GenericName, myRM);

}

/*************************************************************************
 *
 * The RentalMgr_add_customer method contains the following main functions:
 *
 * 1. Create a key which is used to find a factory to create the
 *    RentalItem object.
 * 2. Create a criteria that holds info used during object initialization
 *    (this is similar to the code in the _purchase method)
 * 3. Create the RentalItem object using the create_object method of the
 *    GenericRentalFactory.
 * 4. Uses the GenericCounter object to get a unique rental id.
 *
 *************************************************************************/
SOM_Scope void  SOMLINK RentalMgr_add_customer(RentalManager *somSelf,
                                                Environment *ev,
                                               string lastnm,
                                               string firstnm,
                                               long cust_id)
{
    RentalManagerData *somThis = RentalManagerGetData(somSelf);
    RentalManagerMethodDebug("RentalManager","RentalMgr_add_customer");

    string CustomerLogType;
    CustomerLogType = "CustomerLog";

    CosNaming_NameComponent     elements[2];
    CosLifeCycle_Key            myKey = {2,0,elements};

    CosLifeCycle_NameValuePair  nvPair[5];
    CosLifeCycle_Criteria       myCriteria = {6,0,nvPair};
    boolean                     InitVal = TRUE;

    CustomerAccount             *myCA;
    boolean customer_exist;

    /**************************************************************************
     * Create a criteria used in the create_object processing. Please look at
     * RentalMgr_purchase method for a detailed explanation of the process flow
     * within create_object and an explanation of how the key and criteria
     * are used.
     **************************************************************************/

    myCriteria._buffer[0].name = SOM_INIT;
    myCriteria._buffer[0].value._type = TypeCodeNew(tk_boolean);
    myCriteria._buffer[0].value._value = &InitVal;
    myCriteria._length = myCriteria._length + 1;

    myCriteria._buffer[1].name = "crit_fname";
    myCriteria._buffer[1].value._type = TypeCodeNew(tk_string);
    myCriteria._buffer[1].value._value = firstnm;
    myCriteria._length = myCriteria._length + 1;

    myCriteria._buffer[2].name = "crit_lname";
    myCriteria._buffer[2].value._type = TypeCodeNew(tk_string);
    myCriteria._buffer[2].value._value = lastnm;
    myCriteria._length = myCriteria._length + 1;

    myCriteria._buffer[3].name = "crit_custID";
    myCriteria._buffer[3].value._type = TypeCodeNew(tk_long);
    myCriteria._buffer[3].value._value = &cust_id;
    myCriteria._length = myCriteria._length + 1;

    myCriteria._buffer[4].name = "crit_cust_log_ref";
    myCriteria._buffer[4].value._type = TypeCodeNew(tk_objref, CustomerLogType);
    myCriteria._buffer[4].value._value = somSelf->_get_Customer_Log(ev);
    myCriteria._length = myCriteria._length + 1;


   /***********************************************************************
    * Create the key for the create_object for a CustomerAccount
    ***********************************************************************/

    myKey._buffer[0].kind = KIND_OBJ_INF;
    myKey._buffer[0].id = "CustomerAccount";
    myKey._length = 1;

   /***********************************************************************
    * Create a CustomerAccount using create_object off the GenericRentalFactory.
    * Use the reference to the GenericRentalFactory which is stored as an
    * attribute of the RentalManager object.
    ***********************************************************************/

    myCA = (CustomerAccount*)somThis->GenericRental_Factory->create_object(ev, &myKey, &myCriteria);

}

 /***********************************************************************
  * RentalMgr_remove_customer calls the remove_customer method on the
  * CustomerLog object to delete a customer from the log. This method
  * provides an interface that the client can use to rather than invoking
  * methods directly on the Log itself.
  ***********************************************************************/
SOM_Scope void  SOMLINK RentalMgr_remove_customer(RentalManager *somSelf,
                                                   Environment *ev,
                                                  long cust_id)
{
    RentalManagerData *somThis = RentalManagerGetData(somSelf);
    RentalManagerMethodDebug("RentalManager","RentalMgr_remove_customer");

    somThis->Customer_Log->remove_customer(ev, cust_id);

}

 /***********************************************************************
  * RentalMgr_remove_RentalItem calls the remove_Rental_Item method on the
  * RentalItemLog object to delete a RentalItem from the log. This method
  * provides an interface that the client can use to rather than invoking
  * methods directly on the Log itself.
  ***********************************************************************/

SOM_Scope void  SOMLINK RentalMgr_remove_RentalItem(RentalManager *somSelf,
                                                     Environment *ev,
                                                    long rental_id)
{
    RentalManagerData *somThis = RentalManagerGetData(somSelf);
    RentalManagerMethodDebug("RentalManager","RentalMgr_remove_RentalItem");

    somThis->RentalItem_Log->remove_Rental_Item(ev, rental_id);

}

SOM_Scope void SOMLINK RentalMgr_somDefaultInit(RentalManager *somSelf,
                                                som3InitCtrl* ctrl)
{
    RentalManagerData *somThis; /* set in BeginInitializer */
    somInitCtrl globalCtrl;
    somBooleanVector myMask;
    RentalManagerMethodDebug("RentalManager","somDefaultInit");
    RentalManager_BeginInitializer_somDefaultInit;

    RentalManager_Init_somLifeCycle_LifeCycleObject_somDefaultInit(somSelf, ctrl);

    /* No additional code needed. Nothing to explicitly initialize */
}


SOM_Scope void SOMLINK RentalMgr_somDestruct(RentalManager *somSelf,
                                             octet doFree, som3DestructCtrl* ctrl)
{
    RentalManagerData *somThis; /* set in BeginDestructor */
    somDestructCtrl globalCtrl;
    somBooleanVector myMask;
    RentalManagerMethodDebug("RentalManager","RentalMgr_somDestruct");
    RentalManager_BeginDestructor;

    /* No code is needed: method overriden for performance. */

    RentalManager_EndDestructor;
}


