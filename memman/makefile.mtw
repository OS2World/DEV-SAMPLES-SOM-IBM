#
#
#  25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1996,1996
#  All Rights Reserved
#  Licensed Materials - Property of IBM
#  US Government Users Restricted Rights - Use, duplication or
#  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
#
#  DISCLAIMER OF WARRANTIES.
#  The following [enclosed] code is sample code created by IBM
#  Corporation. This sample code is not part of any standard or IBM
#  product and is provided to you solely for the purpose of assisting
#  you in the development of your applications.  The code is provided
#  "AS IS". IBM MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT
#  NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#  FOR A PARTICULAR PURPOSE, REGARDING THE FUNCTION OR PERFORMANCE OF
#  THIS CODE.  IBM shall not be liable for any damages arising out of
#  your use of the sample code, even if they have been advised of the
#  possibility of such damages.
#
#  DISTRIBUTION.
#  This sample code can be freely distributed, copied, altered, and
#  incorporated into other software, provided that it bears the above
#  Copyright notice and DISCLAIMER intact.
#

#
# This make file has settings for MetaWare High C/C++ version 3.31 for OS/2
# It is may be used with the nmake program.
#

# Changeable settings, the COMPDEF macro can be change to
# modify the memory management policy which will be
# used by the client program.

# SOM and the memory management policy is the default, or corba
#COMPDEF=-D__SOM__ -D__MEMORY_MANAGEMENT_DEFAULT__

# DSOM and the memory management policy is the default, or corba
COMPDEF = -D__DSOM__ -D__MEMORY_MANAGEMENT_DEFAULT__

# SOM and the memory management policy is object owned
#COMPDEF = -D__SOM__ -D__MEMORY_MANAGEMENT_OBJECT_OWNED__

# DSOM and the memory management policy is object owned
#COMPDEF = -D__DSOM__ -D__MEMORY_MANAGEMENT_OBJECT_OWNED__

# DSOM and the memory management policy is dual owned
#COMPDEF = -D__DSOM__ -D__MEMORY_MANAGEMENT_DUAL_OWNED__

# General settings
MAKEFILE     = makefile.mtw
SYS          = OS2
CC           = hc
CPPC         = hc
SC           = sc
LINKER       = link386
IMPLIB       = implib
RM           = del
OBJ          = obj
CFLAGS       = $(DLL_CFLAGS) $(COMPDEF)
CPPFLAGS     = $(DLL_CPPFLAGS) $(COMPDEF)
SCFLAGS      = $(COMPDEF)
TARGETS      = $(DLL_TARGET).$(DLL_EXT) $(EXE_TARGET).$(EXE_EXT) somdimpl
CLEANFILES   = $(DLL_TARGET).$(DLL_LIBEXT) $(DLL_TARGET).$(DLL_DEF) $(DLL_INITMOD).* $(TARGETS)

# EXE build settings
EXE_CFLAGS   = -w0 -c -Hthread $(COMPDEF) -I$(SOMBASE)\include -I$(HCDIR)\include
EXE_CPPFLAGS = -w0 -c -Hthread $(COMPDEF) -I$(SOMBASE)\include -I$(HCDIR)\include
EXE_LFLAGS   = /exepack /packd /packc /align:4 /stack:360000 /pm:vio /noe /noi /nol
EXE_OBJS     = client.obj
EXE_SYSOBJS  = startup.obj
EXE_LIBS     = memman somtk hct hcct os2386
EXE_TARGET   = client
EXE_EXT      = exe
EXE_IDLS     =
EXE_CSRC     =
EXE_CPPSRC   = client.cpp

# DLL build settings
DLL_INITMOD  = sinitmod
DLL_CFLAGS   = -w0 -c -Hthread -Hdll $(COMPDEF) -I$(SOMBASE)\include -I$(HCDIR)\include
DLL_CPPFLAGS = -w0 -c -Hthread -Hdll $(COMPDEF) -I$(SOMBASE)\include -I$(HCDIR)\include
DLL_LFLAGS   = /exepack /packd /packc /align:4 /stack:360000 /pm:vio /noe /noi /nol
DLL_OBJS     = support.obj memman.obj sinitmod.obj
DLL_SYSOBJS  = startupd.obj
DLL_LIBS     = somtk hct hcct os2386
DLL_TARGET   = memman
DLL_EXT      = dll
DLL_LIBEXT   = lib
DLL_DEF      = def
DLL_IDLS     = memman.idl support.idl
DLL_CSRC     =
DLL_CPPSRC   = memman.cpp support.cpp

all: $(TARGETS)

# DLL target
$(DLL_TARGET).$(DLL_EXT): $(DLL_OBJS) $(DLL_TARGET).$(DLL_LIBEXT)
	$(LINKER) $(DLL_LFLAGS) $(DLL_OBJS) $(DLL_SYSOBJS),$@,NUL,$(DLL_LIBS),$(DLL_TARGET).$(DLL_DEF)

# DLL "Import" library target
$(DLL_TARGET).$(DLL_LIBEXT): $(DLL_TARGET).$(DLL_DEF)
	$(IMPLIB) $(DLL_TARGET).$(DLL_LIBEXT) $(DLL_TARGET).$(DLL_DEF)

# DLL exports file
$(DLL_TARGET).$(DLL_DEF): $(DLL_IDLS)
	$(SC) $(SCFLAGS) -s$(DLL_DEF) -mdll=$(DLL_TARGET) $(DLL_IDLS)

# DLL SOMInitModule function
$(DLL_INITMOD).$(OBJ): $(DLL_INITMOD).c
	$(CC) $(DLL_CFLAGS) $*.c

$(DLL_INITMOD).c: $(DLL_IDLS)
	$(SC) $(SCFLAGS) -simod -mdll=$(DLL_TARGET) -mimod=$@ $(DLL_IDLS)

# EXE target
$(EXE_TARGET).$(EXE_EXT): $(EXE_OBJS)
	$(LINKER) $(EXE_LFLAGS) $(EXE_OBJS) $(EXE_SYSOBJS),$@,NUL,$(EXE_LIBS);

# Build DSOM Implementation Repository
somdimpl:
	-regimpl -A -i MemoryManagementServer
	-regimpl -a -i MemoryManagementServer -c MemoryManagement
	-regimpl -a -i MemoryManagementServer -c SupportObject
	@echo somdimpl > somdimpl

# Clean up files that can be re-built
clean: cleanfiles cleanimpl

cleanfiles:
	-del *.$(OBJ) >nul 2>&1
	-del $(EXE_IDLS:.idl=.h) $(DLL_IDLS:.idl=.h) >nul 2>&1
	-del $(EXE_IDLS:.idl=.ih) $(DLL_IDLS:.idl=.ih) >nul 2>&1
	-del $(EXE_IDLS:.idl=.xh) $(DLL_IDLS:.idl=.xh) >nul 2>&1
	-del $(EXE_IDLS:.idl=.xih) $(DLL_IDLS:.idl=.xih) >nul 2>&1
	-del *.ir >nul 2>&1
	-del $(CLEANFILES) >nul 2>&1

cleanimpl:
	-regimpl -D -i MemoryManagementServer

# Suffix rules for building source files
.SUFFIXES: .$(OBJ) .cpp .c .xih .xh .ih .h .idl

.cpp.$(OBJ):
	$(CPPC) $(CPPFLAGS) $<

.c.$(OBJ):
	$(CC) $(CFLAGS) $<

.idl.cpp:
	$(SC) $(SCFLAGS) -usir;xc $<

.idl.c:
	$(SC) $(SCFLAGS) -usir;c $<

.idl.xih:
	$(SC) $(SCFLAGS) -usir;xih $<

.idl.xh:
	$(SC) $(SCFLAGS) -usir;xh $<

.idl.ih:
	$(SC) $(SCFLAGS) -usir;ih $<

.idl.h:
	$(SC) $(SCFLAGS) -usir;h $<

# Dependencies follow
client.obj: client.cpp memman.xh support.xh
	$(CPPC) $(EXE_CPPFLAGS) client.cpp

memman.xih: memman.idl
memman.xh: memman.idl

support.xih: support.idl
support.xh: support.idl

memman.obj: memman.cpp memman.xih memman.xh
	$(CPPC) $(DLL_CPPFLAGS) memman.cpp

support.obj: support.cpp support.xih support.xh
	$(CPPC) $(DLL_CPPFLAGS) support.cpp

