/*
 *
 *
 *  25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1996,1996
 *  All Rights Reserved
 *  Licensed Materials - Property of IBM
 *  US Government Users Restricted Rights - Use, duplication or
 *  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 *
 *
 *
 *
 *  DISCLAIMER OF WARRANTIES.
 *  The following [enclosed] code is sample code created by IBM
 *  Corporation. This sample code is not part of any standard or IBM
 *  product and is provided to you solely for the purpose of assisting
 *  you in the development of your applications.  The code is provided
 *  "AS IS". IBM MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT
 *  NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE, REGARDING THE FUNCTION OR PERFORMANCE OF
 *  THIS CODE.  IBM shall not be liable for any damages arising out of
 *  your use of the sample code, even if they have been advised of the
 *  possibility of such damages.
 *
 *  DISTRIBUTION.
 *  This sample code can be freely distributed, copied, altered, and
 *  incorporated into other software, provided that it bears the above
 *  Copyright notice and DISCLAIMER intact.
 */

Readme for SOM 3.0 memory management sample.

Updated 2/18/96


Sample Overview:
----------------
       This sample is provided to demonstrate the memory management
       policies which are provided by SOM and DSOM. The sample contains
       a client and server side implementations of the different
       policies that can be used by the client. The actual output of the
       client is of little interest since it is the same no matter
       which policy is used by the client. The most interesting aspect
       of the sample is the visual inspection of the code to understand
       the differences which must be coded depending upon the memory
       management policy which is being used.

       In addition to the memory management policy, this sample also
       demonstrates how in, out and inout modifiers on attributes
       are used in SOM.

       To help understand the sample, the memory management section of
       the SOM User's Guide for SOMObjects Version 3.0 should be read.


Making the sample:
------------------
       This sample can be made to run as a SOM sample or changed to
       run as a DSOM sample. The makefiles are currently set up to
       make the sample as a SOM sample, but they also include the
       necessary rules to make the sample DSOM. Therefore if you are
       running as SOM and your system is not currently configured for
       DSOM, you may want to remove somdimpl from the TARGET variable.
       If the sample is to be run as a DSOM sample, the DSOM daemon
       "somdd" must be running (either in the background or in a
       separate OS/2 window) and the Name Service must have been
       configured using som_cfg, as described in the main DSOM README file.

       To control the policy which is used, the makefile must be changed.
       A variable COMPDEF defines the memory policy which is to be used
       for the compile. The COMPDEF variable will also control if the sample
       is created as SOM or DSOM. Here are the lines that need to be
       changed from the makefile.

# Changeable settings, the COMPDEF macro can be change to
# modify the memory management policy which will be
# used by the client program.

# SOM and the memory management policy is the default, or corba
COMPDEF=-D__SOM__ -D__MEMORY_MGMT_DEFAULT__

# DSOM and the memory management policy is the default, or corba
#COMPDEF = -D__DSOM__ -D__MEMORY_MGMT_DEFAULT__

# SOM and the memory management policy is object owned
#COMPDEF = -D__SOM__ -D__MEMORY_MGMT_OBJECT_OWNED__

# DSOM and the memory management policy is object owned
#COMPDEF = -D__DSOM__ -D__MEMORY_MGMT_OBJECT_OWNED__

# DSOM and the memory management policy is dual owned
#COMPDEF = -D__DSOM__ -D__MEMORY_MGMT_DUAL_OWNED__

       To change the policy simply comment out the current line
       and uncomment the line of the policy which you would
       like demonstrated. All generated files should
       be cleaned up from the directory with a:

       nmake -f makefile.age clean

       or similar command (depending upon your compiler).


Files:
------
       client.cpp - Client program for the memory management sample.
       makefile - Makefile for C-Set++ compiler
       makefile.age - Makefile for Visual Age C++ compiler
       makefile.bor - Makefile for Borland compiler
       makefile.mtw - Makefile for Metaware compiler
       makefile.wat - Makefile for Watcom compiler
       memman.idl - The memory management idl file used to demonstrate
               the different memory management policy and parameter
               modifiers.
       memman.cpp - The emitted C++ code for the idl.
       support.idl - Idl file used to define an interface which is
               used to pass objects as parameters and returned
               values.
       support.cpp - The emitter C++ code for the idl.
       readme - this file


Running the sample:
-------------------
       If the sample has been compiled to run as a DSOM sample make
       sure that the DSOM daemon "somdd" is running. In either
       case of the sample being SOM or DSOM enter "client" from
       the command line to start the sample. If DSOM is being used
       the server will automatically start. The results of the client
       will be printed to the screen.


Cleaning up the sample:
-----------------------
       To clean up the DSOM sample, the DSOM daemon must be running, since
       the cleanup will deregister the servers and classes in the Name
       Service.

       All the instances of somdsvr will also need to be terminated since
       the servers will have locks on the som.ir and dlls which will not
       allow them to be deleted.

       Enter nmake clean at a command line to clean up all the non-source
       files, the Implementation Repository and deregister itself from the	
       name server.

