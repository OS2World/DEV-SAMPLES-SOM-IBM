/*
 *
 *
 *  25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1996,1996
 *  All Rights Reserved
 *  Licensed Materials - Property of IBM
 *  US Government Users Restricted Rights - Use, duplication or
 *  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 *
 *
 *
 *
 *  DISCLAIMER OF WARRANTIES.
 *  The following [enclosed] code is sample code created by IBM
 *  Corporation. This sample code is not part of any standard or IBM
 *  product and is provided to you solely for the purpose of assisting
 *  you in the development of your applications.  The code is provided
 *  "AS IS". IBM MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT
 *  NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE, REGARDING THE FUNCTION OR PERFORMANCE OF
 *  THIS CODE.  IBM shall not be liable for any damages arising out of
 *  your use of the sample code, even if they have been advised of the
 *  possibility of such damages.
 *
 *  DISTRIBUTION.
 *  This sample code can be freely distributed, copied, altered, and
 *  incorporated into other software, provided that it bears the above
 *  Copyright notice and DISCLAIMER intact.
 */

/*
 *  This file was generated by the SOM Compiler and Emitter Framework.
 *  Generated using template emitter:
 *      SOM Emitter emitxtm: 2.23.1.6
 */
/*************************************************************************
 *
 * Support.cpp
 *
 * The support code is used to demonstrate how memory management policies
 * are enforced when using an object or object reference as a parameter and
 * returned value.
 *
 *************************************************************************/

#ifndef SOM_Module_SupportObject_Source
#define SOM_Module_SupportObject_Source
#endif
#define SupportObject_Class_Source

#include "support.xih"
#include "stdio.h"


/*
 *Method from the IDL attribute statement:
 *"attribute string b"
 */

SOM_Scope string  SOMLINK _get_b(SupportObject *somSelf,  Environment *ev)
{
    SupportObjectData *somThis = SupportObjectGetData(somSelf);
    SupportObjectMethodDebug("SupportObject","_get_b");

    /* Return statement to be customized: */
    string retVal = (string)SOMMalloc(strlen(somThis->b)+1);
    strcpy(retVal, somThis->b);
    return (retVal);
}

/*
 *Method from the IDL attribute statement:
 *"attribute string b"
 */

SOM_Scope void  SOMLINK _set_b(SupportObject *somSelf,  Environment *ev,
                               string b)
{
    SupportObjectData *somThis = SupportObjectGetData(somSelf);
    SupportObjectMethodDebug("SupportObject","_set_b");

    if (somThis != NULL)
       SOMFree(somThis->b);
    somThis->b = (string)SOMMalloc(strlen(b)+1);
    strcpy(somThis->b, b);

}

SOM_Scope string  SOMLINK returnValues(SupportObject *somSelf,
                                        Environment *ev)
{
    SupportObjectData *somThis = SupportObjectGetData(somSelf);
    SupportObjectMethodDebug("SupportObject","returnValues");

    /* Return statement to be customized: */
    string retVal;

    retVal = (string)SOMMalloc(strlen(somThis->b) + 10);
    sprintf(retVal, "%d : %s : %c\0", somThis->a, somThis->b, somThis->c);
    return (retVal);
}

SOM_Scope void  SOMLINK setValues(SupportObject *somSelf,  Environment *ev,
                                  long a, string b, char c)
{
    SupportObjectData *somThis = SupportObjectGetData(somSelf);
    SupportObjectMethodDebug("SupportObject","setValues");

    somSelf->_set_a(ev, a);
    somSelf->_set_b(ev, b);
    somSelf->_set_c(ev, c);
}


SOM_Scope void SOMLINK somDefaultInit(SupportObject *somSelf, som3InitCtrl* ctrl)
{
    SupportObjectData *somThis; /* set in BeginInitializer */
    somInitCtrl globalCtrl;
    somBooleanVector myMask;
    SupportObjectMethodDebug("SupportObject","somDefaultInit");
    SupportObject_BeginInitializer_somDefaultInit;

    SupportObject_Init_SOMObject_somDefaultInit(somSelf, ctrl);

    /*
     * local SupportObject initialization code added by programmer
     */
   somThis->a = 0;
   somThis->b = NULL;
   somThis->c = ' ';
}


SOM_Scope void SOMLINK somDestruct(SupportObject *somSelf, octet doFree,
                                   som3DestructCtrl* ctrl)
{
    SupportObjectData *somThis; /* set in BeginDestructor */
    somDestructCtrl globalCtrl;
    somBooleanVector myMask;
    SupportObjectMethodDebug("SupportObject","somDestruct");
    SupportObject_BeginDestructor;

    /*
     * local SupportObject deinitialization code added by programmer
     */
   if (somThis->b != NULL)
      SOMFree(somThis->b);

    SupportObject_EndDestructor;
}


