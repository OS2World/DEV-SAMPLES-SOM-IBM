/*
 *
 *   25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1996,1996
 *  All Rights Reserved
 *  Licensed Materials - Property of IBM
 *  US Government Users Restricted Rights - Use, duplication or
 *  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 */

/*
 *
 * DISCLAIMER OF WARRANTIES.
 * The following [enclosed] code is sample code created by IBM
 * Corporation. This sample code is not part of any standard or IBM
 * product and is provided to you solely for the purpose of assisting
 * you in the development of your applications.  The code is provided
 * "AS IS". IBM MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE, REGARDING THE FUNCTION OR PERFORMANCE OF
 * THIS CODE.  IBM shall not be liable for any damages arising out of
 * your use of the sample code, even if they have been advised of the
 * possibility of such damages.
 *
 * DISTRIBUTION.
 * This sample code can be freely distributed, copied, altered, and
 * incorporated into other software, provided that it bears the above
 * Copyright notice and DISCLAIMER intact.
 */

Readme for SOMObjects 3.0 Services Naming specific sample.

Updated: 1/23/96

Naming Service:
   The naming service under SOMObjects 3.0 gives users and programmers the
  ability to refer to objects by name.  Names are in a form that is easy to
  understand and manipulate.  With this service, resources can be found, identified,
  and categorized.  It is also the principle way in which client programs
  can locate objects.

Sample summary:
---------------
   This sample uses the naming service in SOMObjects 3.0.  The sample walks the user
  through the creation of a simple naming tree, How to use property lists, and how to
  search for objects using the naming service.  The steps the main module takes you
  through are:
    SOM Environment Setup
    Resolving the Root Naming Context
    Creating Names
    Creating and Binding Contexts
    Creating, Setting, and Binding Property Lists
    Naming and Binding Objects
    Searching Using a Property Constraint
    Resolving an Object Using a Name
    Creating, Adding, Listing and Removing an Index
    Unbinding and Cleanup

 This sample demonstrates the major function of the Naming service as
 defined in SOMObjects 3.0.  Detailed information can be found in the
 Programmers Guide, Volume II: Object Services and in the Programmers
 Reference, Volume II: Object Services.  The sample takes you through
 creating a naming tree which will look something like this:
                     vehicles
                   /          \
             Antique         Modern
          /       \          /         \
    HotRod     Sedan     SportUtility   Vans
                          /       \
                      Blazer    Jimmy

Making the sample
-----------------
BEFORE making the sample, the DSOM daemon "somdd" must be running (either
in the background or in a separate OS/2 command window) and the Name Service
must have been configured using som_cfg, as described in the README file in
%SOMBASE%\samples\somd.  This is because the makefile for the sample
registers the servers and classes in the Name Service.

The makefiles in this directory will build a client executable, and
 a dynamically loadable library.  They are:

 - nametest.exe (client executable)

 - vehicle.dll (the library for the vehicle class loaded in vehiclesvr)

Depending upon which compiler you are using you will want to use different commands:
  Metaware: nmake -f makefile.met all
  C-Set++: nmake /e
  Visual Age C++: nmake -f makefile.age all /e

Borland and Watcom compilers are not supported by this sample.


Running the sample:
-------------------
 Before running the sample, remember to start the DSOM daemon "somdd" in this
directory. If the daemon is currently running you must first kill it and
restart it in this directory.  This is because the daemon "somdd" will
start the sample server "vehiclesvr" which will attempt to load the vehicle dll.
The vehicle dll needs to reside in the LIBPATH of the sample server.

To start the daemon, enter:

   start /c /f somdd

Once the daemon is started, entering the somossvr must be started
which will load the vehicle dll, to start the somossvr enter:

   start somossvr -a vehiclsvr -i

Once the daemon is started enter the command:

   nametest

 the results will be displayed to standard output.


Cleaning up the sample:
-----------------------
 BEFORE cleaning up the sample, the DSOM daemon "somdd" must be running (either
in the background or in a separate OS/2 command window).  This is because the
makefile for the sample deregisters the servers and classes in the Name Service.

 Terminate all the instances of somossvr(vehiclesvr) and Namingserver.
This is because the servers will have the som.ir and dlls locked so they can't
be erased.  To clean up the sample, enter you make command with the clean option.
This will delete all non-source files and deregister itself from the Name Service
and Implementation Repository.

The daemon "somdd" will restart the naming server to deregister the sample class.


Files:
------
  nametest.cpp: contains the main code for the nametest.exe.

  namemgr.cpp: cpp for the namemgr object
  namemgr.h  : header file for the namemgr object

  vehicle.idl: Main IDL for the vehicle object.
  vehicle.cpp: Methods for the vehicle object (vehicle.dll).

  readme.nam:  This file

  makefile    : Makefile for IBM C-Set++ compiler.
  makefile.bor: Makefile for Borland C++ compiler.
  makefile.met: Makefile for MetaWare C++ compiler.
  makefile.wat: Makefile for Watcom C++ compiler.
  makefile.age: makefile for IBM Visual Age C++ compiler.


