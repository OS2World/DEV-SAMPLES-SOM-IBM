/*
 *
 *   25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1996,1996
 *  All Rights Reserved
 *  Licensed Materials - Property of IBM
 *  US Government Users Restricted Rights - Use, duplication or
 *  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 */

/*
 *
 * DISCLAIMER OF WARRANTIES.
 * The following [enclosed] code is sample code created by IBM
 * Corporation. This sample code is not part of any standard or IBM
 * product and is provided to you solely for the purpose of assisting
 * you in the development of your applications.  The code is provided
 * "AS IS". IBM MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE, REGARDING THE FUNCTION OR PERFORMANCE OF
 * THIS CODE.  IBM shall not be liable for any damages arising out of
 * your use of the sample code, even if they have been advised of the
 * possibility of such damages.
 *
 * DISTRIBUTION.
 * This sample code can be freely distributed, copied, altered, and
 * incorporated into other software, provided that it bears the above
 * Copyright notice and DISCLAIMER intact.
 */

/*
 *  This file was generated by the SOM Compiler and Emitter Framework.
 *  Generated using:
 *      SOM Emitter emitxtm: 2.45
 */

#ifndef SOM_Module_vehicle_Source
#define SOM_Module_vehicle_Source
#endif
#define vehicle_Class_Source

#include "stdio.h"
#include "vehicle.xih"


SOM_Scope void  SOMLINK setvehicle(vehicle *somSelf,  Environment *ev,
                                   string make, string model,
                                   string year, long mpg, long miles)
{
    vehicleData *somThis = vehicleGetData(somSelf);
    vehicleMethodDebug("vehicle","setvehicle");

    somThis->make = (string)SOMMalloc(strlen(make)+1);
    strcpy(somThis->make, make);
    somThis->model = (string)SOMMalloc(strlen(model)+1);
    strcpy(somThis->model, model);
    somThis->year = (string)SOMMalloc(strlen(year)+1);
    strcpy(somThis->year, year);
    somSelf->_set_mpg(ev, mpg);
    somSelf->_set_miles(ev, miles);
//     somThis->mpg = mpg;
//     somThis->miles = miles;

}

SOM_Scope string  SOMLINK displayvehicle(vehicle *somSelf,  Environment *ev)
{
    vehicleData *somThis = vehicleGetData(somSelf);
    vehicleMethodDebug("vehicle","displayvehicle");

    /* Return statement to be customized: */
    string retVal;
    sprintf(retVal, "** Make: %s, Model: %s, Year: %s, EPA M.P.G.: %d, Total miles: %d", somThis->make, somThis->model, somThis->year, somThis->mpg, somThis->miles);
    return (retVal);
}

SOM_Scope void  SOMLINK somInit(vehicle *somSelf)
{
    vehicleData *somThis = vehicleGetData(somSelf);
    vehicleMethodDebug("vehicle","somInit");

}

