
Readme for DSOM Passing Parameters by Copying

/*
 *
 *  25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1996,1996
 *  All Rights Reserved
 *  Licensed Materials - Property of IBM
 *  US Government Users Restricted Rights - Use, duplication or
 *  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 *
 *
 *
 *  DISCLAIMER OF WARRANTIES.
 *  The following [enclosed] code is sample code created by IBM
 *  Corporation. This sample code is not part of any standard or IBM
 *  product and is provided to you solely for the purpose of assisting
 *  you in the development of your applications.  The code is provided
 *  "AS IS". IBM MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT
 *  NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE, REGARDING THE FUNCTION OR PERFORMANCE OF
 *  THIS CODE.  IBM shall not be liable for any damages arising out of
 *  your use of the sample code, even if they have been advised of the
 *  possibility of such damages.
 *
 *  DISTRIBUTION.
 *  This sample code can be freely distributed, copied, altered, and
 *  incorporated into other software, provided that it bears the above
 *  Copyright notice and DISCLAIMER intact.
 */


Passing Parameters by Copying:

    Passing parameters by copying is accomplished by using IDL
  modifiers: pass_by_copy_parameters, object_owns_parameters,
  object_owns_result, pass_by_copy_result,
  maybe_by_value_parameters, maybe_by_copy_result.
  Please reference the SOM User's Guide, Passing Parameters By
  Copying section and Passing Object by Copying section.


    The IDL modifier pass_by_copy_parameters is used to identify
  parameters that should be copied when passed from the caller of
  a method to the method's implementation. And the pass_by_result
  modifier is used to indicate that the result should be copied when
  pass from the method's implementation to the caller of a method.

    The IDL modifiers object_owns_result or object_owns_parameters
  allow the object in the server to retain ownership of a by-value
  parameter or return value.

    To pass an object parameter by-copy in a remote call, the
  implementor must ensure:
  1. The object's class is derived from CosStream::Streamable and
     overrides the internalize_from_stream and externalize_to_stream
     methods.
  2. The client and server both load the actual DLL that contains the
     class implementation and not a stub DLL.

    If a user wants by-copy parameter passing, but is uncertain that
  the objects are descended from CosStream::Streamable and are local
  objects, the user could use maybe_by_value_parameters and
  maybe_by_copy_result IDL modifiers instead of the
  pass_by_copy_parameters and pass_by_copy_result modifiers. In this
  case, if the object is not a Streamable object, or the object is a
  proxy, an object-reference will be sent instead.


Sample Overview:

    The CBVClass contains an instance variable, cbvmember, which is a
  SampleClass object. It contains methods to set this variable in many
  different ways. These methods are:

  SetCBVmember         - pass_by_copy_parameters and
                                 object_owns_parameters
  SetCBVmemberNoPBV    - Normal remote method without pass by copy
  SetCBVmemberNoOwn    - pass_by_copy_parameters but
                                     not object_owns_parameters


  The CBVClass also contains 2 methods for getting the cbvmember:
  GetCBVmember      - pass_by_copy_result
  GetCBVmemberNoPBV - normal method without pass by copy result

    The SampleClass is derived from CosStream::Streamable and it
  contains an attribute, name, and an instance variable cc which is a
  ContainedClass object. The ContainedClass is also derived from
  CosStreamable::Streamable and it contains an attribute, name.

    This sample does not include maybe_by_value_parameters,
  maybe_by_copy_result and object_owns_result modifiers. The code
  for those cases should be pretty similar to what we provide.

    The steps the main program takes you through are:
  - Create a local SampleClass object, sampobj
  - Call SetCBVmember to pass the sampobj as the pass by copy
    parameter
  - Call GetCBVmember to get the cbvmember which is a SampleClass
    object
  - print out the name attribute for both SampleClass object and
    ContainedClass object

  - Create a remote SampleClass object, sampobj2
  - Call SetCBVmemberNoPBV to pass the sampobj2 as the parameter
  - Call GetCBVmemberNoPBV to get the cbvmember which is a SampleClass object
  - print out the name attribute for both SampleClass object and ContainedClass
    object

  - Create a local SampleClass object, sampobj3
  - Call SetCBVmemberNoOwn to pass the sampobj3 as the parameter
  - Call GetCBVmember to get the cbvmember which is a SampleClass
    object
  - print out the name attribute for both SampleClass object and
    ContainedClass object


Compiling the sample:
---------------------
  SOMDD must be running

  Depending upon which compiler you use, you would choose the appropriate makefile.
    -Makefile for C-Set++
    -Makefile.age for Visual Age C++
    -Makefile.bor for Borland

  For Example use the command 'nmake /e' for C-Set (which uses makefile by default),
 and the command 'nmake -f makefile.age all /e' for Visual Age C++.

Running the sample:
-------------------
  Before running the sample, remember to start the DSOM daemon "somdd" in this
 directory. If the daemon is currently running you must first kill it and
 restart it in this directory.

  To start the daemon, enter:

    start /c /f somdd

  To run the sample, simply enter 'sampcli' at the command line.
 Output will be to stdout.


Cleaning up the sample:
-----------------------
BEFORE cleaning up the sample, the DSOM daemon "somdd" must be running (either
in the background or in a separate OS/2 command window).  This is because the
makefile for the sample deregisters the servers and classes in the Name Service.

Terminate all the instances of somossvr.  This is because the servers will have
the som.ir and dlls locked so they can't be erased.  To clean up the sample,
enter "nmake clean /e".  This will delete all non-source files and deregister itself
from the Name Service and Implementation Repository.

The daemon "somdd" will restart the naming server to deregister the sample.


Files:
------
  - readme.pbc : this file
  - makefile : makefile for C-Set ++ compiler
  - sampcli.cpp : cpp for main executable program
  - cbv.idl : IDL for CBVClass
  - cbv.cpp : Methods for CBVClass
  - samp.idl : IDL for SampleClass
  - samp.cpp : Methods for SampleClass
  - cont.idl : IDL for ContainedClass
  - cont.cpp : Methods for ContainedClass



