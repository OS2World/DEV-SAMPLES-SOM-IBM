// 3/8/96 09:37:08
/*
#
#
#    25H7912  (C)  COPYRIGHT International Business Machines Corp. 1996
#   All Rights Reserved
#   Licensed Materials - Property of IBM
#   US Government Users Restricted Rights - Use, duplication or
#   disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
*/
/*
 *
 *
 * DISCLAIMER OF WARRANTIES.
 * The following [enclosed] code is sample code created by IBM
 * Corporation. This sample code is not part of any standard or IBM
 * product and is provided to you solely for the purpose of assisting
 * you in the development of your applications.  The code is provided
 * "AS IS". IBM MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE, REGARDING THE FUNCTION OR PERFORMANCE OF
 * THIS CODE.  IBM shall not be liable for any damages arising out of
 * your use of the sample code, even if they have been advised of the
 * possibility of such damages.
 *
 * DISTRIBUTION.
 * This sample code can be freely distributed, copied, altered, and
 * incorporated into other software, provided that it bears the above
 * Copyright notice and DISCLAIMER intact.
 */
#ifndef apptbook_idl
#define apptbook_idl

#include <mtg.idl>
#include <ccall.idl>

interface somf_TSortedSequence;
interface somf_TDictionary;

interface AppointmentBook : SOMObject
{
//  Exception where an attempt to add an appointment with the same date
//  and time as an existing appointment
    exception OverLap {long ErrCode; char Reason[80];};

   Appointment::IDType addAppointment(in Appointment newAppointment)
                                      raises(OverLap);
// Add an appointment to the book Returns an appointment number.

   sequence<Appointment> getDaysAppointments(in short year,
                             in short month, in short day);
// Return a sequence of the given day's appointments.  Freeing the sequence
// is the callers responsibility

   void deleteAppointment(in Appointment::IDType appointmentID);
// Delete the given appointment from the book.

   sequence<Appointment> getAllAppointments();
// Return a sequence of the appointments. Freeing the sequece is the
// callers responsibility

   attribute Appointment::IDType apptId; // Appointment book id generator.

// readonly attributes needed for subclassing
   readonly attribute somf_TSortedSequence appointments;
   readonly attribute somf_TDictionary appointmentsDictionary;

#ifdef __SOMIDL__
// Implementation
   implementation {
     dllname = "apptbk.dll";
     releaseorder: addAppointment,getDaysAppointments,
                   deleteAppointment,
                   _get_apptId,_set_apptId,
                   getAllAppointments,
                   _get_appointments,
                   _get_appointmentsDictionary;


//   Method Modifiers
     somDefaultInit: override, init;
     somDestruct:    override;
  };
#endif /* __SOMIDL__ */
};
#endif  /* apptbook_idl */
