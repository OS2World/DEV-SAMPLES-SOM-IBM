// 3/8/96 15:52:29
/*
#
#
#    25H7912  (C)  COPYRIGHT International Business Machines Corp. 1996
#   All Rights Reserved
#   Licensed Materials - Property of IBM
#   US Government Users Restricted Rights - Use, duplication or
#   disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
*/
/*
 *
 *
 * DISCLAIMER OF WARRANTIES.
 * The following [enclosed] code is sample code created by IBM
 * Corporation. This sample code is not part of any standard or IBM
 * product and is provided to you solely for the purpose of assisting
 * you in the development of your applications.  The code is provided
 * "AS IS". IBM MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE, REGARDING THE FUNCTION OR PERFORMANCE OF
 * THIS CODE.  IBM shall not be liable for any damages arising out of
 * your use of the sample code, even if they have been advised of the
 * possibility of such damages.
 *
 * DISTRIBUTION.
 * This sample code can be freely distributed, copied, altered, and
 * incorporated into other software, provided that it bears the above
 * Copyright notice and DISCLAIMER intact.
 */

#ifndef pdapptbk_idl
#define pdapptbk_idl

#include <sompipo.idl>      // somPersistence::IPO idl
#include <somestrm.idl>    // somStream::Streamable idl
#include "dapptbk.idl"      // DistributedAppointmentBook idl


interface PersistentDistributedAppointmentBook : DistributedAppointmentBook, somPersistence::IPO,
                                                                     somStream::Streamable
{
     // Besides its base class, PersistentDistributedAppointmentBook is derived from the IPO
     // class and Streamable class to support storing/restoring its object state to/from the
     // persistent datastore through the externalize_to_stream and Interalize_from_stream
     // operations.

    void addToSequence(in Appointment oldAppointment);  //restore an appointment to the book

    attribute unsigned long numberOfAppts;  // number of appointments in a book

     #ifdef __SOMIDL__
      implementation {
        dllname = "apptbk.dll";
        releaseorder: addToSequence, _set_numberOfAppts, _get_numberOfAppts;

        // Method Modifiers
        somDefaultInit: override;
        somDestruct:    override;

        // Be aware of:
        // One of the parent, DistributedAppointmentBook, doestn't inherit from the somOS::
        // ServiceBase class, the default emitted code for init_for_object_creation and init_for_
        // object_reactivation MUST be altered to get the object initialized and reactivated
        // correctly.
        init_for_object_creation: override;        // called for IPO object initialization, MUST override it
        init_for_object_reactivation: override;    // called by OS Server, MUST override it

        addAppointment: override;                  // override to increment number of appointments
        deleteAppointment: override;               // delete appointment form the book
        override: externalize_to_stream, internalize_from_stream;

        // Factory Modifier
        factory = PersistentAppointmentBookFactory;  //creates PersistentAppointmentBook instances

      };
    #endif /* __SOMIDL__ */
};
#endif /* pdapptbk_idl */
