//  3/8/96 16:13:09
/*
#
#
#    25H7912  (C)  COPYRIGHT International Business Machines Corp. 1996
#   All Rights Reserved
#   Licensed Materials - Property of IBM
#   US Government Users Restricted Rights - Use, duplication or
#   disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
*/
/*
 *
 *
 * DISCLAIMER OF WARRANTIES.
 * The following [enclosed] code is sample code created by IBM
 * Corporation. This sample code is not part of any standard or IBM
 * product and is provided to you solely for the purpose of assisting
 * you in the development of your applications.  The code is provided
 * "AS IS". IBM MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE, REGARDING THE FUNCTION OR PERFORMANCE OF
 * THIS CODE.  IBM shall not be liable for any damages arising out of
 * your use of the sample code, even if they have been advised of the
 * possibility of such damages.
 *
 * DISTRIBUTION.
 * This sample code can be freely distributed, copied, altered, and
 * incorporated into other software, provided that it bears the above
 * Copyright notice and DISCLAIMER intact.
 */



#ifndef apevents_idl
#define apevents_idl

#include <somobj.idl>
#include <naming.idl>


 interface ApptBookEventService : SOMObject
 {

  enum reasonCode {EventContextFailure,            // Could not get event context from name service
                   RootContextFailure,             // Could not get root context from name service
                   ResolveEventChannelNameFailure, // Name service could not find the event channel
                   EventChannelReferenceFailure};  // Method call using Event channel object reference failed

  exception EventError
  {
    long errorCode;
    char reason[80];
  };




  void initEventService();
  // This method is called to initialize the objects needed to transport events from the
  // appointment book to the client. If it does not exist, an event channel is created
  // and a reference to it is stored in the name service.

  unsigned long getEventChannelRef() raises(EventError); //Returns reference to event channel
  // This method is called to get the reference to the event channel. It is called by both
  // the event handler in the client and the appointment book in the BookServer.

 void deleteEventChannel();
 // Cleans up the event objects

    #ifdef __SOMIDL__
      implementation {
        dllname = "apptbk.dll";



       releaseorder:initEventService, getEventChannelRef,
                   deleteEventChannel;


       CosNaming::NamingContext  ECNameContext;
       CosNaming::Name           ECName;

      };
    #endif /* __SOMIDL__ */




 };

#endif /* apevents_idl */
