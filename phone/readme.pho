/*
 *
 *  25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1996,1996
 *  All Rights Reserved
 *  Licensed Materials - Property of IBM
 *  US Government Users Restricted Rights - Use, duplication or
 *  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 *
 *
 *
 *  DISCLAIMER OF WARRANTIES.
 *  The following [enclosed] code is sample code created by IBM
 *  Corporation. This sample code is not part of any standard or IBM
 *  product and is provided to you solely for the purpose of assisting
 *  you in the development of your applications.  The code is provided
 *  "AS IS". IBM MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT
 *  NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE, REGARDING THE FUNCTION OR PERFORMANCE OF
 *  THIS CODE.  IBM shall not be liable for any damages arising out of
 *  your use of the sample code, even if they have been advised of the
 *  possibility of such damages.
 *
 *  DISTRIBUTION.
 *  This sample code can be freely distributed, copied, altered, and
 *  incorporated into other software, provided that it bears the above
 *  Copyright notice and DISCLAIMER intact.
 */

Read Me for POSIX Persistence Sample

This sample stores an object's state data persistently to a POSIX flat file.

This file establishes a context from which the sample can be executed.

Contents of this Read Me file:

   	Related Samples
   	Setup for the Sample
   	Files Provided
   	Notes to User
   	Description of Sample
   	Flow of Sample
   	Sample Constraints

Related Samples:
----------------

Other Persistence-related samples provided in this sample package:

  	Sample showing use of POSSOM with DB2/2 database with single database table

Setup for the Sample:
---------------------

Steps to setup, build, and run the Persistent PhoneEntry POSIX sample follow.

	1.	som_cfg -i (Configure DSOM)

	2.	START SOMDD (Starts DSOM. This is necessary because the makefile will register the
sample's MYSERVER in the implementation repository and start the server)

	3.	For the following compilers:

	1.	For Cset++, Visual Age, and Metaware compilers: nmake -f makefile_name all (Builds the
executables. Cleans up any old files from a previous compile), where makefile_name is:
MAKEFILE for CSet++ compiler, MAKEFILE.AGE for Visual Age compiler, and
MAKEFILE.MTW for Metaware compiler.

	2.	For Watcom compiler: wmake -f makefile_name all (Builds the executables. Cleans up any
old files from a previous compile), where makefile_name is: MAKEFILE.WAT for Watcom
compiler.

	3.	For Borland compiler: make -f makefile_name all (Builds the executables. Cleans up any
old files from a previous compile), where makefile_name is: MAKEFILE.BOR for Borland
compiler.

	4.	phonmain (Executes the client program)

Files provided:
---------------

   	README (Contains directions for setup, build, and running of sample; and sample
description)
   	MAKEFILE (Makefile for CSet++ compiler to build the sample into executables)
   	MAKEFILE.AGE (Makefile for VisualAge compiler to build the sample into executables)
   	MAKEFILE.BOR (Makefile for Borland compiler to build the sample into executables)
   	MAKEFILE.MTW (Makefile for Metaware compiler to build the sample into executables)
   	MAKEFILE.WAT (Makefile for Watcom compiler to build the sample into executables)
   	PHONE.IDL (IDL for PhoneEntry class)
   	PHONE.CPP (C++ program to define phoneEntry class methods)
   	PHONMAIN.CPP (Client program which builds phonebook entries and stores them
persistently)

Notes to User:
--------------

This sample assumes that DSOM has been correctly configured.

The makefile registers a server named SampleServer and the required POSSOM classes for the POSIX
PDS and PID.

The user should delete any other server that may have the same SOM classes registered with it as are
registered with SampleServer for this sample.

Exception handling is done minimally.

Description of Sample:
----------------------

Please reference the SOMObjects Object Services Programmer's Guide chapter about the Persistent
Object Service (POSSOM).  This sample is based on the PhoneEntry example which is described in
detail in the "Scenarios for Creating and Using Persistent Objects" section of the POSSOM chapter.

The Persistent Object Service (also known as POSSOM) is used to store objects into a variety of
persistent datastores.  The mechanism that interfaces between the persistence framework and the
datastore is called a Persistent Data Service (PDS).

IBM supplies three PDS's with the SOMObjects Toolkit:	 a POSIX PDS (interfaces to a flat file
datastore), a B-Tree PDS (interfaces to an indexed or keyed file datastore), and a DB2 PDS (interfaces
to the DB2/2 relational database). A user or database provider can write additional PDS's to interface
to the datastore of their choice.

The strength of the Persistent Object Service is the fact that the client program does not have to write
very much datastore specific code in order to store their objects into a variety of different datastores.
Basically, the specifics for interfacing with a particular datastore are encapsulated in the PDS and
something called a "Persistent Identifier" (or PID).

The goal of this sample is to demonstrate how to write a client program to store persistent object state
data into a POSIX flat file.  The application is a phone book where each entry in the phone book
contains a person's name, phone number, and office location.  The objects being made persistent are of
the phoneEntry class type.  The person's name, phone number, and office location are stored in a
POSIX flat file named "phone.dat".

In order to better understand the differences imposed on the client program by different datastores,
you should contrast this sample with the PhoneEntry DB2/2 sample, also provided in this sample
package.  You should note differences in the following between the two samples:

	The classes that the makefile registers in the IR.  Note that there are different classes to be
registered depending upon the datastore type (for example,
somPersistencePOSIX::PDS_POSIX and somPersistencePOSIX::PID_POSIX are registered
by the MAKEFILE for this sample to work properly).

	The PID is setup differently, depending on datastore type. The PID does encapsulate some of
the characteristics of the datastore, so, for example, the PID for DB2 requires setting a
database alias which is the name of the DB2/2 database alias as well as a schema mapper
name.  In this example, the POSIX PID requires only that the pathname (phone.dat) be set.

Flow of Sample:
---------------

The overall flow of this POSSOM sample (phonmain.cpp) is as follows:

	1.	Instantiate and setup the PID for POSIX.  Note that the POSIX PID requires a pathname
(phone.dat in this case) for the flat file where the persistent state data is to be stored.

	2.	Instantiate and setup the phoneEntry object. We use the init_for_object_creation method
because PhoneEntry is a service-based object (created by os::server).  The os::server creates a
persistent object reference as part of the init_for_object_creation.  Therefore, the object
reference created by somdCreate must be released, because it is no longer valid.

	3.	Initialize the PhoneEntry state data by calling get() and set() methods for name, phone
number, and office location.

	4.	Store the PhoneEntry state data to the POSIX flat file.

	5.	Input new values for name, phone number, and office location by again calling the get() and
set() methods. The pid is not changed.

	6.	Overwrite the original PhoneEntry persistent state data in the phone.dat flat file with the
new state data by calling the store() method.

	7.	Restore the original data from the POSIX datastore and write state data to screen.

	8.	Delete PhoneEntry data from the POSIX datastore and clean-up the environment. Note: the
POSIX file will also be deleted.

Sample Constraints:
-------------------

All objects are created on the same server (SampleServer).
