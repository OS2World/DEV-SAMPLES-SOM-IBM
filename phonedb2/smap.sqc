/*
 *
 *  25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1996,1996
 *  All Rights Reserved
 *  Licensed Materials - Property of IBM
 *  US Government Users Restricted Rights - Use, duplication or
 *  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 *
 *
 *  DISCLAIMER OF WARRANTIES.
 *  The following [enclosed] code is sample code created by IBM
 *  Corporation. This sample code is not part of any standard or IBM
 *  product and is provided to you solely for the purpose of assisting
 *  you in the development of your applications.  The code is provided
 *  "AS IS". IBM MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT
 *  NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE, REGARDING THE FUNCTION OR PERFORMANCE OF
 *  THIS CODE.  IBM shall not be liable for any damages arising out of
 *  your use of the sample code, even if they have been advised of the
 *  possibility of such damages.
 *
 *  DISTRIBUTION.
 *  This sample code can be freely distributed, copied, altered, and
 *  incorporated into other software, provided that it bears the above
 *  Copyright notice and DISCLAIMER intact.
 *
 */

/*
 *  This file was generated by the SOM Compiler and Emitter Framework.
 *  Generated using:
 *      SOM Emitter emitctm: 2.44
 */

#ifndef SOM_Module_smap_Source
#define SOM_Module_smap_Source
#endif
#define smap_Class_Source

#include "smap.ih"
#include <sqlenv.h>
#include <sqlcodes.h>
#include <stdio.h>

EXEC SQL INCLUDE SQLCA;
EXEC SQL BEGIN DECLARE SECTION;
           short id;
	char name[21];
          char phone_number[21];
	short office;
EXEC SQL END DECLARE SECTION;


/**************************************************************************/
/*  Implementation for store method                                                          */
/**************************************************************************/

SOM_Scope somPersistenceDB2_SOMPsqlca*  SOMLINK store(smap *somSelf,
                                                       Environment *ev,
                                                      somStream_StreamIO* objstr,
                                                      somPersistenceDB2_PID_DB2* pid)
{
    /* smapData *somThis = smapGetData(somSelf); */
    smapMethodDebug("smap","store");

    /* Retrieve database key from pid*/
    id = _read_short(pid, ev );

    /* Retrieve state data from externalized stream*/
    strcpy(name, _read_string(objstr, ev));
    strcpy(phone_number,_read_string(objstr,ev));	
    office = _read_short(objstr, ev);

    /* Try to update the table (based on key) with object state data*/
    EXEC SQL UPDATE USERID.PHONE
	SET NAME = :name, PHONE_NUMBER = :phone_number, OFFICE=:office
	WHERE ID = :id;

   /* If row not found, insert into the table instead */
if (sqlca.sqlcode == SQL_RC_W100)         /* ROW NOT FOUND */
       EXEC SQL INSERT INTO USERID.PHONE
            VALUES (:id, :name, :phone_number, :office );

   return ((SOMPsqlca*) &sqlca);


/*    return (smap_parent_somPersistenceDB2_SchemaMapper_store(somSelf,
                                                             ev,
                                                             objstr,
                                                             pid));
*/
}

/**************************************************************************/
/*  Implementation for restore method                                                       */
/**************************************************************************/

SOM_Scope somPersistenceDB2_SOMPsqlca*  SOMLINK restore(smap *somSelf,
                                                         Environment *ev,
                                                        somStream_StreamIO* objstr,
                                                        somPersistenceDB2_PID_DB2* pid)
{
    /* smapData *somThis = smapGetData(somSelf); */
    smapMethodDebug("smap","restore");

    /* Retrieve database key from pid*/
    id = _read_short(pid, ev);

    /* Get the object state data from table, based on key*/
    EXEC SQL SELECT NAME, PHONE_NUMBER, OFFICE INTO :name, :phone_number, :office
        FROM  USERID.PHONE
        WHERE ID = :id;

    /* Write the data retrieved from the table into the stream which will be internalized into the object*/
   _write_string(objstr, ev, name);
   _write_string(objstr, ev, phone_number);
   _write_short(objstr, ev, office);

   return ((SOMPsqlca*) &sqlca);


/*    return (smap_parent_somPersistenceDB2_SchemaMapper_restore(somSelf,
                                                               ev,
                                                               objstr,
                                                               pid));
*/
}

/**************************************************************************/
/*  Implementation for Delete method                                                        */
/**************************************************************************/

SOM_Scope somPersistenceDB2_SOMPsqlca*  SOMLINK Delete(smap *somSelf,
                                                        Environment *ev,
                                                       somPersistenceDB2_PID_DB2* pid)
{
    /* smapData *somThis = smapGetData(somSelf); */
    smapMethodDebug("smap","Delete");

/*
    return (smap_parent_somPersistenceDB2_SchemaMapper_Delete(somSelf,
                                                              ev,
                                                              pid));
*/

  /* Retrieve database table key from pid*/
  id = _read_short( pid, ev);

   /* Delete entry from table, based on key*/
   EXEC SQL DELETE FROM USERID.PHONE
        WHERE ID = :id;

   return ((SOMPsqlca*) &sqlca);



}

