#
#   COMPONENT_NAME: somx
#
#   ORIGINS: 27
#
#
#   10H9767, 25H7912  (C) COPYRIGHT International Business Machines Corp. 1992,1996 
#   All Rights Reserved
#   Licensed Materials - Property of IBM
#   US Government Users Restricted Rights - Use, duplication or
#   disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
/*
 *  @(#) 1.11 src/somples.os2/somd/c/peer/readme, somx.somd, som2.5, s259604a 1/6/96 10:53:16 [1/24/96 17:50:54]
 */

/*
 *
 * DISCLAIMER OF WARRANTIES.
 * The following [enclosed] code is sample code created by IBM
 * Corporation. This sample code is not part of any standard or IBM
 * product and is provided to you solely for the purpose of assisting
 * you in the development of your applications.  The code is provided
 * "AS IS". IBM MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE, REGARDING THE FUNCTION OR PERFORMANCE OF
 * THIS CODE.  IBM shall not be liable for any damages arising out of
 * your use of the sample code, even if they have been advised of the
 * possibility of such damages.
 *
 * DISTRIBUTION.
 * This sample code can be freely distributed, copied, altered, and
 * incorporated into other software, provided that it bears the above
 * Copyright notice and DISCLAIMER intact.
 */

NOTE:  Please review the README file in %SOMBASE%\samples\somd for general
       information on setting up and running DSOM samples.  This README
       assumes that information.

       This sample requires the DSOM Work Group Enabler.

Sample summary:
---------------
The "peer" example demonstrates
    (1) DSOM working with the Event Manager
    (2) ONEWAY methods (caller does not wait for a response)
    (3) Timer events

Two servers, each having a timer setup to "pop" at fixed intervals set
by the user, notify each other when their timers pop.

Making the sample:
------------------
BEFORE making the sample, the DSOM daemon "somdd" must be running (either
in the background or in a separate OS/2 command window) and the Name Service
must have been configured using som_cfg, as described in the README file in
%SOMBASE%\samples\somd.  This is because the makefile for the sample
registers the servers and classes in the Name Service.

The makefile in this directory will build a server executable and a 
dynamically loadable library.  They are:

 - peer.exe (the peer server executable)

 - peerserv.dll (the library to be loaded by the server)

Entering "nmake" will not only build the above but it will also 
build the interface and implementation repositories that the 
servers will utilize.  It will register two servers which are
identical except for their aliases: peerServerA and peerServerB.

Running the sample:
-------------------
Before running the sample, remember to start the DSOM daemon "somdd" in this
directory. If the daemon is currently running you must first kill it and
restart it in this directory.  

To start the daemon, enter:

   start /c /f somdd

Once the daemon is started, you can run the test in two ways.  You can start
both peer servers manually or you can start one peer server and have
that peer server automatically start the second peer server.  In the second
case, if the first peer starts the second peer, the second peer's window
will have to be brought to the forground to answer its prompts.

In using the first case, create two windows and start peer in both windows by
typing "peer".  When asked for the alias of the server in the first window,
reply "peerServerA".  In the other window reply "peerServerB".  When asked for
the alias of the "other" server in window one, reply "peerServerB".  In the
other window, reply "peerServerA".  Note at this time, if only one peer
was started, the second peer would be instantiated.  Set the timer interval
for both servers (e.g., 2 seconds in one and 3 seconds in the other).
Hit Enter in both windows to set them off.

Whenever peerServerA's timer pops, the Event Manager causes a method,
noteTimeout, to be sent to the server object in peerServerB.  peerServerB's
server object executes this method by displaying a message on its window.
The message is:

"Received timeout notification from peerServerA"

Whenever, peerServerB's timer pops, a similar sequence occurs. The two
servers will run until you interrupt them (e.g., via control-C).

To run the peer sample across two different machines, set the
"hostname" entries in the Implementation Repository to the two
different machine names, and start somdd on both machines prior
to starting the peer program on each machine.

Terminating the sample
----------------------
Since the PeerServer object is a server, it is a persistent object and has
an indirect reference.  When connections between the peer servers has been
established, terminating either server with a cntrl c signal causes that
copy of the server to exit and a "broken connection" indication being sensed
by the other peer which is a client of the exiting server.  The remaining peer
recovers by reestablishes a connection. This results in the creation of a new
copy of the exiting server.  Responding to the prompts generated by this new
copy resumes the interaction of the two peers. To terminate all copies of the
peer executable:
               terminate one of the peers
               a new copy will be respawned and block waiting for input
               terminate the alternate peer
               terminate the respawned copy of the first peer


Cleaning up the sample
----------------------
BEFORE cleaning up the sample, the DSOM daemon "somdd" must be running (either
in the background or in a separate OS/2 command window).  This is because the 
makefile for the sample deregisters the servers and classes in the Name Service.

Terminate all the instances of somdsvr.  This is because the servers will have
the som.ir and dlls locked so they can't be erased.  To clean up the sample,
enter "nmake clean".  This will delete all non-source files and deregister itself
from the Name Service and Implementation Repository.

The daemon "somdd" will restart the naming server to deregister the sample.


