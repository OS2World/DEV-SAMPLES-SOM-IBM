//
//   COMPONENT_NAME: somx
//
//   ORIGINS: 27
//
//
//    25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1996,1996  
//   All Rights Reserved
//   Licensed Materials - Property of IBM
//   US Government Users Restricted Rights - Use, duplication or
//   disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
//
#ifndef lint
static char *sccsid = "@(#) 1.3 src/somples.os2/somd/cpp/animal/danimal.cpp, somx.somd, som3.0 9/20/94 16:17:38 [5/31/95 13:22:36]";
#endif

/*
 *
 * DISCLAIMER OF WARRANTIES.
 * The following [enclosed] code is sample code created by IBM
 * Corporation. This sample code is not part of any standard or IBM
 * product and is provided to you solely for the purpose of assisting
 * you in the development of your applications.  The code is provided
 * "AS IS". IBM MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE, REGARDING THE FUNCTION OR PERFORMANCE OF
 * THIS CODE.  IBM shall not be liable for any damages arising out of
 * your use of the sample code, even if they have been advised of the
 * possibility of such damages.
 *
 * DISTRIBUTION.
 * This sample code can be freely distributed, copied, altered, and
 * incorporated into other software, provided that it bears the above
 * Copyright notice and DISCLAIMER intact.
 */

/*
 *  This file was generated by the SOM Compiler and Emitter Framework.
 *  Generated using: 
 *      SOM Emitter emitxtm: 2.42
 */

#ifndef SOM_Module_danimal_Source
#define SOM_Module_danimal_Source
#endif
#define dAnimal_Class_Source

#include <stdio.h>
#include <string.h>
#include "dloc.xh"
#include "danimal.xih"


/*
 * Name of animal.
 */

SOM_Scope void  SOMLINK _set_name(dAnimal *somSelf,  Environment *ev, 
                                  string name)
{
    dAnimalData *somThis = dAnimalGetData(somSelf);
    dAnimalMethodDebug("dAnimal","_set_name");

    if (somThis->name) SOMFree(somThis->name);
    somThis->name = (string) SOMMalloc(strlen(name) + 1);
    strcpy(somThis->name, name);

}

/*
 * Type of animal.
 */

SOM_Scope void  SOMLINK _set_type(dAnimal *somSelf,  Environment *ev, 
                                  string type)
{
    dAnimalData *somThis = dAnimalGetData(somSelf);
    dAnimalMethodDebug("dAnimal","_set_type");

    if (somThis->type) SOMFree(somThis->type);
    somThis->type = (string) SOMMalloc(strlen(type) + 1);
    strcpy(somThis->type, type);
}

/*
 * Food animal likes to eat.
 */

SOM_Scope void  SOMLINK _set_food(dAnimal *somSelf,  Environment *ev, 
                                  string food)
{
    dAnimalData *somThis = dAnimalGetData(somSelf);
    dAnimalMethodDebug("dAnimal","_set_food");

    if (somThis->food) SOMFree(somThis->food);
    somThis->food = (string) SOMMalloc(strlen(food) + 1);
    strcpy(somThis->food, food);
}

/*
 * Work area for display method.
 */

SOM_Scope void  SOMLINK _set_buff(dAnimal *somSelf,  Environment *ev, 
                                  string buff)
{
    dAnimalData *somThis = dAnimalGetData(somSelf);
    dAnimalMethodDebug("dAnimal","_set_buff");

    if (somThis->buff) SOMFree(somThis->buff);
    somThis->buff = (string) SOMMalloc(strlen(buff) + 1);
    strcpy(somThis->buff, buff);
}

/*
 * Returns description of animal.
 */

SOM_Scope string  SOMLINK display(dAnimal *somSelf,  Environment *ev)
{
    string bp;

    dAnimalData *somThis = dAnimalGetData(somSelf);
    dAnimalMethodDebug("dAnimal","display");

    bp = somThis->buff;
    sprintf(bp, "\nI am a %s.\n", somThis->type);
    bp += strlen(bp);
    sprintf(bp, "My name is %s.\n", somThis->name);
    bp += strlen(bp);
    sprintf(bp, "I like to eat %s.\n", somThis->food);
    bp += strlen(bp);
    sprintf(bp, "I live in %s, %s.\n",
	    somThis->loc->_get_city(ev),
	    somThis->loc->_get_state(ev));

    return somThis->buff;
}

SOM_Scope void SOMLINK somDefaultInit(dAnimal *somSelf, somInitCtrl* ctrl)
{
    dAnimalData *somThis; /* set in BeginInitializer */
    Environment *ev;
    somInitCtrl globalCtrl;
    somBooleanVector myMask;
    dAnimalMethodDebug("dAnimal","somDefaultInit");
    dAnimal_BeginInitializer_somDefaultInit;

    dAnimal_Init_SOMObject_somDefaultInit(somSelf, ctrl);

    ev = somGetGlobalEnvironment();

    somSelf->_set_name(ev, "unknown name");
    somSelf->_set_type(ev, "unknown type");
    somSelf->_set_food(ev, "unknown food");
    somThis->loc = new dLocation;
    somThis->buff = (string) SOMMalloc(2048);
}


SOM_Scope void SOMLINK somDestruct(dAnimal *somSelf, octet doFree, 
                                   somDestructCtrl* ctrl)
{
    dAnimalData *somThis; /* set in BeginDestructor */
    somDestructCtrl globalCtrl;
    somBooleanVector myMask;
    dAnimalMethodDebug("dAnimal","somDestruct");
    dAnimal_BeginDestructor;

    if (somThis->name) SOMFree(somThis->name);
    if (somThis->type) SOMFree(somThis->type);
    if (somThis->food) SOMFree(somThis->food);
    if (somThis->buff) SOMFree(somThis->buff);
    somThis->loc->somFree();

    dAnimal_EndDestructor;
}



/*
 * Creates and returns an instance of the input class name.
 * The input class name must be a subclass of dAnimal or an exception
 * will be raised.
 */

SOM_Scope dAnimal*  SOMLINK create_animal(AnimalFactory *somSelf, 
                                           Environment *ev, string className)
{
    SOMClass  *clasnew = (SOMClass *) NULL;
    dAnimal   *newObj  = (dAnimal *) NULL;
    somId     temp_id;

    /* AnimalFactoryData *somThis = AnimalFactoryGetData(somSelf); */
    AnimalFactoryMethodDebug("AnimalFactory","create_animal");

    /* get class object for input class name */
    temp_id = (somId) somIdFromString(className);
    clasnew = SOMClassMgrObject->somFindClass(temp_id, 0, 0);
    SOMFree(temp_id);
 
    /* verify that class is a subclass of dAnimal */
    if (clasnew->somDescendedFrom(_dAnimal)) {
        somPrintf("Creating instance of dAnimal, class = %s\n", className);
        newObj = (dAnimal *) clasnew->somNew();
    }
    else {
        somSetException(ev, USER_EXCEPTION, ex_InvalidClassName, InvalidClassName);
    }

    return newObj;
}
