#
#   COMPONENT_NAME: somx
#
#   ORIGINS: 27
#
#
#    25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1996,1996  
#   All Rights Reserved
#   Licensed Materials - Property of IBM
#   US Government Users Restricted Rights - Use, duplication or
#   disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
/*
 *  @(#) 1.6 src/somples.os2/somd/cpp/collect/readme, somx.somd, som2.5, s259604a 12/27/95 13:54:30 [1/24/96 17:51:31]
 */

/*
 *
 * DISCLAIMER OF WARRANTIES.
 * The following [enclosed] code is sample code created by IBM
 * Corporation. This sample code is not part of any standard or IBM
 * product and is provided to you solely for the purpose of assisting
 * you in the development of your applications.  The code is provided
 * "AS IS". IBM MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE, REGARDING THE FUNCTION OR PERFORMANCE OF
 * THIS CODE.  IBM shall not be liable for any damages arising out of
 * your use of the sample code, even if they have been advised of the
 * possibility of such damages.
 *
 * DISTRIBUTION.
 * This sample code can be freely distributed, copied, altered, and
 * incorporated into other software, provided that it bears the above
 * Copyright notice and DISCLAIMER intact.
 */

NOTE:  Please review the README file in %SOMBASE%\samples\somd for general
       information on setting up and running DSOM samples.  This README
       assumes that information.

Sample summary
--------------
This directory contains the source code for a simple client/server
program based on DSOM. The example is an implementation of a bank,
the main purpose of which is to show how to use Collection Classes.
This example specifically shows how to use sets, linked lists and
their iterators.  The following figure illustrates how information
is stored in the example:

There a main "Bank" object which has three sets; checking, savings and
mf (mutual funds). Each of these sets contain accounts of bank customers, i.e.,
all checking accounts in the bank are in one set and similarly the savings and
mf accounts are in corresponding sets.  Each account is associated with a list of
transactions that have been performed on the account. A transaction is an object
that has details about the operation (ex: deposit, date, amount, etc.,)
that is performed on an account.


                    +-----------------+
                    | Bank Object     |   SOMObject
                    |                 |
                    | Open()          |
                    | Close()         |
                    |                 |
                    | check  save  mf +-----------+
                    +--|------|-------+           |
                       |      +---+               |
                       |          |               |      Transactions (linked list)
         somf_TSet  +--+---+     ++-----+      +--+---+   __    __    __
                    |Acct 1|     |Acct 1|      |Acct 1|--|__|--|__|--|__|
                    |------|     |------|      |------|
                    |Acct 2|     |Acct 2|      |Acct 2|
                    |------|     |------|      |------|
                    |Acct 3|     |Acct 3|      |Acct 3|
                    |------|     |------|      |------|
                    | .... |     | .... |      | .... |
                    |------|     |------|      |------|   __    __    __
                    |Acct n|     |Acct n|      |Acct n|--|__|--|__|--|__|
                    +------+     +------+      +------+


The "Account" object (defined in acct.idl) is of the type somf_MCollectible
so that it can belong to a set (somf_TSet) and the transactions are of the type
somf_MLinkable so that they can belong to a linked list.

The client and server side use iterators to walk through an account set
or a transaction list.  For example, we use a linked list iterator to list all
the transactionas that have been performed on an account.

Making the sample
-----------------
BEFORE making the sample, the DSOM daemon "somdd" must be running (either
in the background or in a separate OS/2 command window) and the Name Service
must have been configured using som_cfg, as described in the README file in
%SOMBASE%\samples\somd.  This is because the makefile for the sample
registers the servers and classes in the Name Service.

The makefile in this directory will build a client executable, a server
executable and a dynamically loadable library.  They are:

 - client.exe (the DSOM client application)

 - bank.dll (the library loaded by somdsvr)

 - server.exe (a general purpose C++ server)

Entering "nmake" will not only build the above but it will also
build the interface and implementation repositories that the
servers will utilize.

Running the sample
------------------
BEFORE running the sample, remember to start the DSOM daemon "somdd" in this
directory. If the daemon is currently running you must first kill it and
restart it in this directory.  This is because the daemon "somdd" will
start the sample server "server" which will attempt to load the bank dll.
The bank dll needs to reside in the LIBPATH of the sample server.

To start the daemon, enter:

   start /c /f somdd

Once the daemon is started, entering "client" from the command line will
run the sample.  The server will be started automatically and the results
will be displayed to standard output.

You may also start the server yourself by entering "server -a BankServer"
from the command line.  Note that "BankServer" is the server alias name
specified in the makefile when calling the Implementation Repository
registration utility, regimpl.

Cleaning up the sample
----------------------
BEFORE cleaning up the sample, the DSOM daemon "somdd" must be running (either
in the background or in a separate OS/2 command window).  This is because the
makefile for the sample deregisters the servers and classes in the Name Service.

Terminate all the instances of somdsvr and server.  This is because the servers
will have the som.ir and dlls locked so they can't be erased.  To clean up the
sample, enter "nmake clean".  This will delete all non-source files and deregister
itself from the Name Service and Implementation Repository.

The daemon "somdd" will restart the naming server to deregister the sample.


