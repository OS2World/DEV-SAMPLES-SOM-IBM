#
#   COMPONENT_NAME: somx
#
#   ORIGINS: 27
#
#
#    25H7912  (C)  COPYRIGHT International Business Machines Corp. 1992,1996,1996  
#   All Rights Reserved
#   Licensed Materials - Property of IBM
#   US Government Users Restricted Rights - Use, duplication or
#   disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
/* 
 *  @(#) 2.19 src/somples.os2/somd/readme, somx.somd, som2.5, s259604a 1/10/96 21:06:49 [1/24/96 17:31:10]
 */

/*
 *
 * DISCLAIMER OF WARRANTIES.
 * The following [enclosed] code is sample code created by IBM
 * Corporation. This sample code is not part of any standard or IBM
 * product and is provided to you solely for the purpose of assisting
 * you in the development of your applications.  The code is provided
 * "AS IS". IBM MAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE, REGARDING THE FUNCTION OR PERFORMANCE OF
 * THIS CODE.  IBM shall not be liable for any damages arising out of
 * your use of the sample code, even if they have been advised of the
 * possibility of such damages.
 *
 * DISTRIBUTION.
 * This sample code can be freely distributed, copied, altered, and
 * incorporated into other software, provided that it bears the above
 * Copyright notice and DISCLAIMER intact.
 */

      *** IMPORTANT: YOU MUST READ AND FOLLOW THE DIRECTIONS IN  ***
      *** THIS FILE IN ORDER TO CORRECTLY BUILD AND RUN THE DSOM ***
      *** SAMPLES.                                               ***


PREPARING TO BUILD AND RUN THE DSOM SAMPLES
===========================================

These samples require that you have set the SOMENV environment
variable, which designates a configuration file. The configuration file
defines many DSOM and Naming Service environment settings, including
those for supported communication protocols. For more detailed
information, See "The Configuration File for Environment Variables" in
Chapter 4 of "SOM Toolkit User Guide".

The default setting of SOMENV is as follows:

    SOMENV=%SOMBASE%\ETC\SOMENV.INI

Most of the settings within the configuration file (designated by
SOMENV) have default settings.  However, the SOMIR and HOSTNAME
settings should be explicitly set before attempting to build or run the
DSOM sample programs, by editing the configuration file with a text
editor.  (The SOMIR setting can also be done via the SOMIR environment
variable.)  The SOMIR setting should include ".\SOMIR.IR" as the last
file, to use the Interface Repository in the current working directory
built by each sample.  In addition, within the stanza corresponding to
each protocol named in the SOMDPROTOCOLS setting, the HOSTNAME setting
must be defined.

After updating the configuration file, you must run the "som_cfg"
utility to configure the Naming Service, if you have not already done
so.  One machine in each DSOM workgroup must be configured as the
Naming Service "install host" (by running "som_cfg -i" on that
machine).  The som_cfg utility registers the "namingServer" in the
Implementation Repository, updates the configuration file to contain
information necessary to contact the Naming Server (the SOMNMOBJREF
setting), and initializes the Naming Service (by storing information in
the directory designated by SOMDDIR).  The som_cfg utility also
starts the Naming Server and the DSOM daemon (somdd).  

Once som_cfg has been run once, it need not be run again unless the
Implementation Repository needs to be regenerated, the protocol
information in the configuration file needs to be changed (such as the
SOMDPROTOCOLS, HOSTNAME, or SOMDPORT settings), or the contents of the
SOMDDIR directory must be regenerated.

Note that the SOMNMOBJREF setting in the configuration file and the
SOMDDIR directory must have been generated by the same run of som_cfg.
In addition, SOMDDIR and SOMNMOBJREF need to be kept the same once the
Naming Service has been configured.  

Naming Service configuration, using som_cfg, is typically only done
once.  The daemon "somdd" and DSOM servers (including the Naming
Server) can be stopped and restarted any number of times.

For more detailed information on DSOM and Naming Service configuration,
see Chapter 6 of the SOMobjects User's Guide.

The C samples in the "c" subdirectory require that you have built the
CORBA-compliant C bindings for the SOMobjects toolkit.  These bindings are
produced by running the "somcorba" command.  (See the SOMobjects README
file for more information on "somcorba" C bindings vs. "somstars" C
bindings.) You should also verify that the SMADDSTAR environment
variable is undefined when building the C samples.  The C++ samples in
the "cpp" subdirectory require that you have built the C++ bindings
(the .xh files) using the "somxh" command.



BUILDING A DSOM SAMPLE
======================

Makefiles are provided in each sample subdirectory.  The DSOM daemon
(somdd) must be running (either in the background or in a separate
OS/2 command window) and the Naming Service must have been configured
using som_cfg, as described above, BEFORE making the samples.  This is
because the makefile for each sample registers servers and classes in
the Naming Service.

Enter "nmake" to compile all necessary IDL files, update the
Implementation Repository, and build all necessary DLLs and
executables.


RUNNING A DSOM SAMPLE
=====================

To run a sample, the DSOM daemon (somdd) must be running, either in the
background or in a separate OS/2 command window.  Because the samples
build DSOM servers, libraries, and Interface Repositories into the
current working directory, you should start start somdd and any DSOM servers
from the directory in which the sample was built.

As you move from one DSOM sample to the next, you must terminate the
DSOM daemon (somdd) and the DSOM servers that are running for the
previous sample and restart somdd from the next sample's directory.
(This could be avoided if the .EXE, .DLL, and SOM.IR files built for
each sample were stored in directories designated by PATH, LIBPATH, and
SOMIR, respectively, as would be the case for real applications.)
Refer to "Cleaning Up After Running a DSOM Sample" below.

Review the README files in the sample subdirectories for additional
instructions.



RUNNING A DSOM SAMPLE ACROSS TWO MACHINES
=========================================
To run a DSOM sample across two different machines, you must set the
SOMDPROTOCOLS configuration file setting on both machines
appropriately, depending on your chosen network transport.  If using
TCP/IP without AnyNet, then the SOMSOCKETS setting must also be set to
TCPIPSockets on both machines.  The SOMNMOBJREF setting in the
configuration file, generated by som_cfg on the machine on which the
Naming Server will run, should be copied into the configuration file on
all other machines.  

The SOMIR setting on a server machine should refer to an Interface
Repository that contains the IDL used by the sample, so that the
application DLLs can be loaded dynamically by the server.   The SOMIR
of both client and server machines must contain the appropriate Sockets
class (the default, if SOMSOCKETS is unset, is AnyNetSockets.)

The sample's server(s) must be registered, using regimpl or pregimpl,
on the machine on which that server will run.  The DSOM daemon (somdd)
must be running on the Naming Server machine at the time of server
registration.

Before running the sample, somdd must be running on all server
machines, including the machine on which the Naming Server will run.

Some of the DSOM sample programs have additional requirements for
running across two different machines; see the README file associated
with each sample for more information.


CLEANING UP AFTER RUNNING A DSOM SAMPLE
=======================================

To stop DSOM servers and the DSOM daemon, press Ctrl/Esc to bring up
the task list, select the task with the right mouse button, then select
close with the left mouse button.  You can also press Ctrl-c in a
window running a DSOM server or the DSOM daemon.  (You should stop DSOM
servers before stopping the DSOM daemon.)

Enter "nmake clean" to clean up a sample directory by removing unnecessary
files.  For "nmake clean" to work appropriately, the makefiles assume that
the daemon is started but none of the servers are running on the given
machine.


OVERVIEW OF DSOM SAMPLES
========================

The c/stack and cpp/stack subdirectories contain the source for:

  client  - a sample client program that uses a simple Stack
            class implementation. The client program is the same one
            explained in the SOMobjects Developer Toolkit Users Guide
            (Chapter 6)

The c/animal and cpp/animal subdirectories contain the source for:

  testsvr - a simple generic server that uses the SOM Object Adapter
            to automatically load class libraries and execute requests
            on objects instantiated in the server

  anitest - a sample client program that uses static bindings to invoke
            methods on remote objects

The c/dii and cpp/dii subdirectories contain the source for:

  diitest - a sample client program that uses the Dynamic Invocation
            Interface (DII) to invoke a method on a remote object


The c/event and cpp/event subdirectories contain the source for

  eventsvr - a server that supports the class libraries - cell, eventch and
             eventcomm and in which remote instances of these classes reside.

  eventcli - client program that invokes methods on the remote "cell" class
             instance

  consumer - a second client program that invokes methods on a remote "event
             channel" instance to pull events from the channel.


The c/peer and cpp/peer subdirectories contain the source for:

  peer     - a sample server program that uses the Event Manager
             and illustrates how to write "peer" servers (servers that
	     act as both client and server simultaneously).

The c/peerthrd and cpp/peerthrd subdirectories contain the source for:

  peer     - a sample server program that uses threads to illustrate how
             to write "peer" servers (servers that act as both client and
             server simultaneously).

The cpp/collect subdirectory contains the source for:

  client   - an example client program that illustrates how to use
             the SOMobjects toolkit Collection Classes with DSOM.
             This example specifically shows how to use sets, linked
             lists and their iterators.

  server   - an example C++ server.

The c/proxy and cpp/proxy subdirectories contain the source for:

  tstproxy - a example client program that illustrates how to write a
             customized proxy class.

